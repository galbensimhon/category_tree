{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * AnimationFrame provides a user-friendly abstraction around requesting\n * and canceling animation frames.\n */\nvar AnimationFrame =\n/** @class */\nfunction () {\n  function AnimationFrame() {\n    this.rafIDs = new Map();\n  }\n  /**\n   * Requests an animation frame. Cancels any existing frame with the same key.\n   * @param {string} key The key for this callback.\n   * @param {FrameRequestCallback} callback The callback to be executed.\n   */\n\n\n  AnimationFrame.prototype.request = function (key, callback) {\n    var _this = this;\n\n    this.cancel(key);\n    var frameID = requestAnimationFrame(function (frame) {\n      _this.rafIDs.delete(key); // Callback must come *after* the key is deleted so that nested calls to\n      // request with the same key are not deleted.\n\n\n      callback(frame);\n    });\n    this.rafIDs.set(key, frameID);\n  };\n  /**\n   * Cancels a queued callback with the given key.\n   * @param {string} key The key for this callback.\n   */\n\n\n  AnimationFrame.prototype.cancel = function (key) {\n    var rafID = this.rafIDs.get(key);\n\n    if (rafID) {\n      cancelAnimationFrame(rafID);\n      this.rafIDs.delete(key);\n    }\n  };\n  /**\n   * Cancels all queued callback.\n   */\n\n\n  AnimationFrame.prototype.cancelAll = function () {\n    var _this = this; // Need to use forEach because it's the only iteration method supported\n    // by IE11. Suppress the underscore because we don't need it.\n    // tslint:disable-next-line:enforce-name-casing\n\n\n    this.rafIDs.forEach(function (_, key) {\n      _this.cancel(key);\n    });\n  };\n  /**\n   * Returns the queue of unexecuted callback keys.\n   */\n\n\n  AnimationFrame.prototype.getQueue = function () {\n    var queue = []; // Need to use forEach because it's the only iteration method supported\n    // by IE11. Suppress the underscore because we don't need it.\n    // tslint:disable-next-line:enforce-name-casing\n\n    this.rafIDs.forEach(function (_, key) {\n      queue.push(key);\n    });\n    return queue;\n  };\n\n  return AnimationFrame;\n}();\n\nexport { AnimationFrame };","map":{"version":3,"sources":["animationframe.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AAEH;;;AAGG;AACH,IAAA,cAAA;AAAA;AAAA,YAAA;AAAA,WAAA,cAAA,GAAA;AACmB,SAAA,MAAA,GAAS,IAAI,GAAJ,EAAT;AAuDlB;AArDC;;;;AAIG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,GAAR,EAAqB,QAArB,EAAmD;AAAnD,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,MAAL,CAAY,GAAZ;AACA,QAAM,OAAO,GAAG,qBAAqB,CAAC,UAAC,KAAD,EAAM;AAC1C,MAAA,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,GAAnB,EAD0C,CAE1C;AACA;;;AACA,MAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KALoC,CAArC;AAMA,SAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,EAAqB,OAArB;AACD,GATD;AAWA;;;AAGG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAkB;AAChB,QAAM,KAAK,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAd;;AACA,QAAI,KAAJ,EAAW;AACT,MAAA,oBAAoB,CAAC,KAAD,CAApB;AACA,WAAK,MAAL,CAAY,MAAZ,CAAmB,GAAnB;AACD;AACF,GAND;AAQA;;AAEG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;AACA;AACA;;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,UAAC,CAAD,EAAI,GAAJ,EAAO;AACzB,MAAA,KAAI,CAAC,MAAL,CAAY,GAAZ;AACD,KAFD;AAGD,GAPD;AASA;;AAEG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,KAAK,GAAa,EAAxB,CADF,CAEE;AACA;AACA;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,UAAC,CAAD,EAAI,GAAJ,EAAO;AACzB,MAAA,KAAK,CAAC,IAAN,CAAW,GAAX;AACD,KAFD;AAGA,WAAO,KAAP;AACD,GATD;;AAUF,SAAA,cAAA;AAAC,CAxDD,EAAA","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * AnimationFrame provides a user-friendly abstraction around requesting\n * and canceling animation frames.\n */\nvar AnimationFrame = /** @class */ (function () {\n    function AnimationFrame() {\n        this.rafIDs = new Map();\n    }\n    /**\n     * Requests an animation frame. Cancels any existing frame with the same key.\n     * @param {string} key The key for this callback.\n     * @param {FrameRequestCallback} callback The callback to be executed.\n     */\n    AnimationFrame.prototype.request = function (key, callback) {\n        var _this = this;\n        this.cancel(key);\n        var frameID = requestAnimationFrame(function (frame) {\n            _this.rafIDs.delete(key);\n            // Callback must come *after* the key is deleted so that nested calls to\n            // request with the same key are not deleted.\n            callback(frame);\n        });\n        this.rafIDs.set(key, frameID);\n    };\n    /**\n     * Cancels a queued callback with the given key.\n     * @param {string} key The key for this callback.\n     */\n    AnimationFrame.prototype.cancel = function (key) {\n        var rafID = this.rafIDs.get(key);\n        if (rafID) {\n            cancelAnimationFrame(rafID);\n            this.rafIDs.delete(key);\n        }\n    };\n    /**\n     * Cancels all queued callback.\n     */\n    AnimationFrame.prototype.cancelAll = function () {\n        var _this = this;\n        // Need to use forEach because it's the only iteration method supported\n        // by IE11. Suppress the underscore because we don't need it.\n        // tslint:disable-next-line:enforce-name-casing\n        this.rafIDs.forEach(function (_, key) {\n            _this.cancel(key);\n        });\n    };\n    /**\n     * Returns the queue of unexecuted callback keys.\n     */\n    AnimationFrame.prototype.getQueue = function () {\n        var queue = [];\n        // Need to use forEach because it's the only iteration method supported\n        // by IE11. Suppress the underscore because we don't need it.\n        // tslint:disable-next-line:enforce-name-casing\n        this.rafIDs.forEach(function (_, key) {\n            queue.push(key);\n        });\n        return queue;\n    };\n    return AnimationFrame;\n}());\nexport { AnimationFrame };\n//# sourceMappingURL=animationframe.js.map"]},"metadata":{},"sourceType":"module"}