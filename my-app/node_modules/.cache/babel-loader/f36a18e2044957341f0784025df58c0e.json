{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\CateTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport values from 'lodash/values';\nimport Node from \"./Node.js\";\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    isOpen: false,\n    children: ['/root/gal', '/root/ben']\n  },\n  '/root/gal': {\n    path: '/root/gal',\n    type: 'folder',\n    isOpen: false,\n    children: ['/root/gal/read.txt']\n  },\n  '/root/gal/read.txt': {\n    path: '/root/gal/read.txt',\n    type: 'file',\n    isOpen: false,\n    content: 'some test'\n  }\n};\nexport function CateTree(props) {\n  _s();\n\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  const [nodes, setNodes] = useState(data); //const nodes = data;\n\n  const getRootNodes = () => {\n    return values(nodes).filter(node => node.isRoot === true);\n  };\n\n  const onToggle = node => {\n    nodes[node.path].isOpen = !node.isOpen;\n    setNodes(nodes);\n  };\n\n  const getChildNodes = node => {\n    return node.children ? node.children.map(path => nodes[path]) : [];\n  };\n\n  const root = getRootNodes();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: root.map(node => /*#__PURE__*/_jsxDEV(Node, {\n      node: node,\n      getChildren: getChildNodes,\n      level: 0,\n      onToggle: onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 35\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CateTree, \"0MM9DAho9etskPZtIZVNNkY0AzQ=\");\n\n_c = CateTree;\nexport default CateTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"CateTree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/CateTree.js"],"names":["React","Component","useState","values","Node","data","path","type","isRoot","isOpen","children","content","CateTree","props","nodes","setNodes","getRootNodes","filter","node","onToggle","getChildNodes","map","root"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,IAAI,GAAG;AACT,WAAS;AACLC,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,IAAI,EAAE,QAFD;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,MAAM,EAAE,KAJH;AAKLC,IAAAA,QAAQ,EAAE,CAAC,WAAD,EAAc,WAAd;AALL,GADA;AAQT,eAAa;AACTJ,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,IAAI,EAAE,QAFG;AAGTE,IAAAA,MAAM,EAAE,KAHC;AAITC,IAAAA,QAAQ,EAAE,CAAC,oBAAD;AAJD,GARJ;AAcT,wBAAsB;AAClBJ,IAAAA,IAAI,EAAE,oBADY;AAElBC,IAAAA,IAAI,EAAE,MAFY;AAGlBE,IAAAA,MAAM,EAAE,KAHU;AAIlBE,IAAAA,OAAO,EAAE;AAJS;AAdb,CAAb;AAsBA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAC5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACG,IAAD,CAAlC,CAF4B,CAI5B;;AACA,QAAMW,YAAY,GAAG,MAAM;AACvB,WAAOb,MAAM,CAACW,KAAD,CAAN,CAAcG,MAAd,CAAqBC,IAAI,IAAIA,IAAI,CAACV,MAAL,KAAgB,IAA7C,CAAP;AACH,GAFD;;AAIA,QAAMW,QAAQ,GAAID,IAAD,IAAU;AACvBJ,IAAAA,KAAK,CAACI,IAAI,CAACZ,IAAN,CAAL,CAAiBG,MAAjB,GAA0B,CAACS,IAAI,CAACT,MAAhC;AACAM,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMM,aAAa,GAAIF,IAAD,IAAU;AAC5B,WAAOA,IAAI,CAACR,QAAL,GAAgBQ,IAAI,CAACR,QAAL,CAAcW,GAAd,CAAkBf,IAAI,IAAIQ,KAAK,CAACR,IAAD,CAA/B,CAAhB,GAAyD,EAAhE;AACH,GAFD;;AAIA,QAAMgB,IAAI,GAAGN,YAAY,EAAzB;AAEA,sBACI;AAAA,cAEQM,IAAI,CAACD,GAAL,CAASH,IAAI,iBAAK,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAZ;AAAkB,MAAA,WAAW,EAAEE,aAA/B;AAA8C,MAAA,KAAK,EAAE,CAArD;AAAwD,MAAA,QAAQ,EAAED;AAAlE;AAAA;AAAA;AAAA;AAAA,YAAlB;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA3BeP,Q;;KAAAA,Q;AA6BhB,eAAeA,QAAf","sourcesContent":["import React, {Component, useState} from 'react';\r\nimport values from 'lodash/values';\r\nimport Node from \"./Node.js\";\r\n\r\nconst data = {\r\n    '/root': {\r\n        path: '/root',\r\n        type: 'folder',\r\n        isRoot: true,\r\n        isOpen: false,\r\n        children: ['/root/gal', '/root/ben']\r\n    },\r\n    '/root/gal': {\r\n        path: '/root/gal',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: ['/root/gal/read.txt']\r\n    },\r\n    '/root/gal/read.txt': {\r\n        path: '/root/gal/read.txt',\r\n        type: 'file',\r\n        isOpen: false,\r\n        content: 'some test'\r\n    }\r\n}\r\n\r\nexport function CateTree(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    const [nodes, setNodes] = useState(data);\r\n\r\n    //const nodes = data;\r\n    const getRootNodes = () => {\r\n        return values(nodes).filter(node => node.isRoot === true);\r\n    }\r\n\r\n    const onToggle = (node) => {\r\n        nodes[node.path].isOpen = !node.isOpen;\r\n        setNodes(nodes);\r\n    }\r\n\r\n    const getChildNodes = (node) => {\r\n        return node.children ? node.children.map(path => nodes[path]) : [];\r\n    }\r\n\r\n    const root = getRootNodes();\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                root.map(node => (<Node node={node} getChildren={getChildNodes} level={0} onToggle={onToggle}/>))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CateTree;"]},"metadata":{},"sourceType":"module"}