{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\CateTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport values from 'lodash/values';\nimport Node from \"./Node.js\";\nimport { ADD_FILE, ADD_FOLDER, RENAME, DELETE, ADD, ADDFO, RNAME, DEL } from \"../utills/helpers\";\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    isOpen: false,\n    children: ['/root/gal', '/root/ben']\n  },\n  '/root/gal': {\n    path: '/root/gal',\n    type: 'folder',\n    isOpen: false,\n    children: ['/root/gal/read.txt']\n  },\n  '/root/ben': {\n    path: '/root/ben',\n    type: 'folder',\n    isOpen: false,\n    children: []\n  },\n  '/root/gal/read.txt': {\n    path: '/root/gal/read.txt',\n    type: 'file',\n    isOpen: false\n  }\n}; // TODO: should implement this functions\n// change node, and also his father (children), can get by short the path by 1\n\nfunction getItemsContextMenu() {\n  const onClickAddFile = (node, name) => {\n    // add new node by name, also change father childrens\n    console.log('add file');\n  };\n\n  const onClickAddFolder = (node, name) => {\n    // add new node by name, also change father childrens\n    console.log('add directory');\n  };\n\n  const onClickDeleteFolder = node => {\n    // delete node by name, also change father childrens\n    console.log('delete directory');\n  };\n\n  const onClickDeleteFile = node => {\n    // delete node by name, also change father childrens\n    console.log('delete file');\n  };\n\n  const onClickRename = (node, name) => {\n    // change path of node, also change father childrens\n    console.log('rename file/Folder');\n  };\n\n  const onClickCancel = (node, name) => {\n    // change path of node, also change father childrens\n    console.log('rename file/Folder');\n  };\n\n  return [{\n    text: ADD_FILE,\n    type: 'folder',\n    needNameInput: true,\n    itemClick: (node, name) => {\n      onClickAddFile(node, name);\n    }\n  }, {\n    text: ADD_FOLDER,\n    type: 'folder',\n    needNameInput: true,\n    itemClick: (node, name) => {\n      onClickAddFolder(node, name);\n    }\n  }, {\n    text: DELETE,\n    type: 'both',\n    itemClick: node => {\n      node.type === 'folder' ? onClickDeleteFolder(node) : onClickDeleteFile(node);\n    }\n  }, {\n    text: RENAME,\n    type: 'both',\n    needNameInput: true,\n    itemClick: (node, name) => {\n      onClickRename(node, name);\n    }\n  }];\n}\n\nexport function CateTree(props) {\n  _s();\n\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  const [nodes, setNodes] = useState(data);\n  const [fileToAdd, setFileToAdd] = useState(null);\n  const [folderToAdd, setFolderToAdd] = useState(null);\n  const [nameFile, setNameFile] = useState(null);\n  const [fileToDelete, setFileToDelete] = useState(null); // '/root/ben': {\n  //     path: '/root/ben',\n  //         type: 'folder',\n  //         isOpen: false,\n  //         children: []\n  // },\n  // '/root/gal/read.txt': {\n  //     path: '/root/gal/read.txt',\n  //         type: 'file',\n  //         isOpen: false,\n  //         content: 'some test'\n  // }\n\n  const items = getItemsContextMenu();\n  const setters = {\n    ADD: setFileToAdd,\n    ADDFO: setFolderToAdd,\n    RNAME: setNameFile,\n    DEL: setFileToDelete\n  };\n  useEffect(() => {\n    if (fileToAdd !== null || fileToAdd !== '') {\n      let nodes_copy = JSON.parse(JSON.stringify(nodes));\n      const regex = RegExp('(.*)\\\\/\\\\w+$', 'gm');\n      let father_node = regex.exec(fileToAdd);\n      nodes_copy[father_node].children.push(fileToAdd);\n      nodes_copy[fileToAdd] = {\n        path: fileToAdd,\n        type: 'file',\n        isOpen: 'false'\n      };\n      console.log(`Adding file ${fileToAdd}`);\n      setNodes(nodes_copy);\n    } else {\n      alert('Please insert name of file to add!');\n    }\n  }, [fileToAdd]);\n  useEffect(() => {\n    if (folderToAdd) {\n      let old_nodes = JSON.parse(JSON.stringify(nodes));\n      old_nodes[fileToAdd] = {\n        path: folderToAdd\n      };\n      console.log(`Adding folder ${folderToAdd}`);\n    }\n  }, [folderToAdd]);\n  useEffect(() => {\n    if (nameFile) {\n      let old_nodes = JSON.parse(JSON.stringify(nodes));\n      old_nodes[fileToAdd] = {\n        path: nameFile\n      };\n      console.log(`Renaming file ${nameFile}`);\n    }\n  }, [nameFile]);\n  useEffect(() => {\n    if (fileToDelete) {\n      console.log(`Deleting file ${fileToDelete}`);\n      let old_nodes = JSON.parse(JSON.stringify(nodes));\n      delete old_nodes[fileToDelete];\n      setNodes(old_nodes);\n    }\n  }, [fileToDelete]);\n\n  const getRootNodes = () => {\n    return values(nodes).filter(node => node.isRoot === true);\n  };\n\n  const onToggle = node => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    nodes_copy[node.path].isOpen = !node.isOpen;\n    setNodes(nodes_copy);\n  };\n\n  const getChildNodes = node => {\n    return node.children ? node.children.map(path => nodes[path]) : [];\n  };\n\n  const root = getRootNodes();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: root.map(node => /*#__PURE__*/_jsxDEV(Node, {\n      node: node,\n      getChildren: getChildNodes,\n      level: 1,\n      onToggle: onToggle,\n      menuItems: items,\n      setters: setters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 37\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CateTree, \"cTDzbWuR6F202l7llxy97Ock518=\");\n\n_c = CateTree;\nexport default CateTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"CateTree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/CateTree.js"],"names":["React","Component","useEffect","useState","values","Node","ADD_FILE","ADD_FOLDER","RENAME","DELETE","ADD","ADDFO","RNAME","DEL","data","path","type","isRoot","isOpen","children","getItemsContextMenu","onClickAddFile","node","name","console","log","onClickAddFolder","onClickDeleteFolder","onClickDeleteFile","onClickRename","onClickCancel","text","needNameInput","itemClick","CateTree","props","nodes","setNodes","fileToAdd","setFileToAdd","folderToAdd","setFolderToAdd","nameFile","setNameFile","fileToDelete","setFileToDelete","items","setters","nodes_copy","JSON","parse","stringify","regex","RegExp","father_node","exec","push","alert","old_nodes","getRootNodes","filter","onToggle","getChildNodes","map","root"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\r\nimport values from 'lodash/values';\r\nimport Node from \"./Node.js\";\r\nimport {ADD_FILE, ADD_FOLDER, RENAME, DELETE, ADD, ADDFO, RNAME, DEL} from \"../utills/helpers\";\r\n\r\nconst data = {\r\n    '/root': {\r\n        path: '/root',\r\n        type: 'folder',\r\n        isRoot: true,\r\n        isOpen: false,\r\n        children: ['/root/gal', '/root/ben']\r\n    },\r\n    '/root/gal': {\r\n        path: '/root/gal',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: ['/root/gal/read.txt']\r\n    },\r\n    '/root/ben': {\r\n        path: '/root/ben',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: []\r\n    },\r\n    '/root/gal/read.txt': {\r\n        path: '/root/gal/read.txt',\r\n        type: 'file',\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\n\r\n\r\n// TODO: should implement this functions\r\n// change node, and also his father (children), can get by short the path by 1\r\nfunction getItemsContextMenu(){\r\n\r\n    const onClickAddFile = (node, name) => {\r\n        // add new node by name, also change father childrens\r\n        console.log('add file')\r\n    };\r\n    const onClickAddFolder = (node, name) => {\r\n        // add new node by name, also change father childrens\r\n        console.log('add directory')\r\n\r\n    };\r\n    const onClickDeleteFolder= (node) => {\r\n        // delete node by name, also change father childrens\r\n        console.log('delete directory')\r\n\r\n    };\r\n    const onClickDeleteFile = (node) => {\r\n        // delete node by name, also change father childrens\r\n        console.log('delete file')\r\n\r\n    };\r\n    const onClickRename = (node, name) => {\r\n        // change path of node, also change father childrens\r\n        console.log('rename file/Folder')\r\n\r\n    };\r\n    const onClickCancel = (node, name) => {\r\n        // change path of node, also change father childrens\r\n        console.log('rename file/Folder')\r\n\r\n    };\r\n\r\n    return [\r\n        {\r\n            text: ADD_FILE,\r\n            type: 'folder',\r\n            needNameInput: true,\r\n            itemClick: (node, name) => {\r\n                onClickAddFile(node, name);\r\n            }\r\n        },\r\n        {\r\n            text: ADD_FOLDER,\r\n            type: 'folder',\r\n            needNameInput: true,\r\n            itemClick: (node, name) => {\r\n                onClickAddFolder(node, name);\r\n            }\r\n        },\r\n        {\r\n            text: DELETE,\r\n            type: 'both',\r\n            itemClick: (node) => {\r\n                node.type === 'folder' ? onClickDeleteFolder(node) : onClickDeleteFile(node);\r\n            }\r\n        },\r\n        {\r\n            text: RENAME,\r\n            type: 'both',\r\n            needNameInput: true,\r\n            itemClick: (node, name) => {\r\n                onClickRename(node, name);\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\nexport function CateTree(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    const [nodes, setNodes] = useState(data);\r\n    const [fileToAdd, setFileToAdd] = useState(null);\r\n    const [folderToAdd, setFolderToAdd] = useState(null);\r\n    const [nameFile, setNameFile] = useState(null);\r\n    const [fileToDelete, setFileToDelete] = useState(null);\r\n\r\n    // '/root/ben': {\r\n    //     path: '/root/ben',\r\n    //         type: 'folder',\r\n    //         isOpen: false,\r\n    //         children: []\r\n    // },\r\n    // '/root/gal/read.txt': {\r\n    //     path: '/root/gal/read.txt',\r\n    //         type: 'file',\r\n    //         isOpen: false,\r\n    //         content: 'some test'\r\n    // }\r\n\r\n    const items = getItemsContextMenu();\r\n    const setters = {\r\n        ADD: setFileToAdd,\r\n        ADDFO: setFolderToAdd,\r\n        RNAME: setNameFile,\r\n        DEL: setFileToDelete,\r\n    }\r\n    useEffect(() => {\r\n        if(fileToAdd !== null || fileToAdd !== ''){\r\n            let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n            const regex = RegExp('(.*)\\\\/\\\\w+$', 'gm');\r\n            let father_node = regex.exec(fileToAdd);\r\n            nodes_copy[father_node].children.push(fileToAdd);\r\n            nodes_copy[fileToAdd] = {\r\n                path: fileToAdd,\r\n                type: 'file',\r\n                isOpen: 'false'\r\n            }\r\n            console.log(`Adding file ${fileToAdd}`);\r\n            setNodes(nodes_copy);\r\n        }\r\n        else{\r\n            alert('Please insert name of file to add!');\r\n        }\r\n    }, [fileToAdd])\r\n    useEffect(() => {\r\n        if(folderToAdd){\r\n            let old_nodes = JSON.parse(JSON.stringify(nodes));\r\n            old_nodes[fileToAdd] = {path: folderToAdd, }\r\n            console.log(`Adding folder ${folderToAdd}`);\r\n        }\r\n    }, [folderToAdd])\r\n    useEffect(() => {\r\n        if(nameFile){\r\n            let old_nodes = JSON.parse(JSON.stringify(nodes));\r\n            old_nodes[fileToAdd] = {path: nameFile, }\r\n            console.log(`Renaming file ${nameFile}`);\r\n        }\r\n    }, [nameFile])\r\n    useEffect(() => {\r\n        if(fileToDelete){\r\n            console.log(`Deleting file ${fileToDelete}`);\r\n            let old_nodes = JSON.parse(JSON.stringify(nodes));\r\n            delete old_nodes[fileToDelete];\r\n            setNodes(old_nodes);\r\n        }\r\n    }, [fileToDelete])\r\n\r\n    const getRootNodes = () => {\r\n        return values(nodes).filter(node => node.isRoot === true);\r\n    }\r\n\r\n    const onToggle = (node) => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        nodes_copy[node.path].isOpen = !node.isOpen;\r\n        setNodes(nodes_copy);\r\n    }\r\n\r\n    const getChildNodes = (node) => {\r\n        return node.children ? node.children.map(path => nodes[path]) : [];\r\n    }\r\n\r\n    const root = getRootNodes();\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                root.map((node) => (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n                                        menuItems={items} setters={setters}/>))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CateTree;"]},"metadata":{},"sourceType":"module"}