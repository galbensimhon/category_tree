{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\CateTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport values from 'lodash/values';\nimport last from 'lodash/last';\nimport _ from 'lodash';\nimport Node from \"./Node.js\";\nimport { ADD_FILE, ADD_FOLDER, RENAME, DELETE, ADD, ADDFO, RNAME, DEL, FILE, FOLDER } from \"../utills/constants\";\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    isOpen: false,\n    children: ['/root/gal', '/root/ben']\n  },\n  '/root/gal': {\n    path: '/root/gal',\n    type: 'folder',\n    isOpen: false,\n    children: ['/root/gal/read.txt']\n  },\n  '/root/ben': {\n    path: '/root/ben',\n    type: 'folder',\n    isOpen: false,\n    children: []\n  },\n  '/root/gal/read.txt': {\n    path: '/root/gal/read.txt',\n    type: 'file',\n    isOpen: false\n  }\n};\n\nfunction getItemsContextMenu() {\n  return [{\n    text: ADD_FILE,\n    type: 'folder',\n    needNameInput: true\n  }, {\n    text: ADD_FOLDER,\n    type: 'folder',\n    needNameInput: true\n  }, {\n    text: DELETE,\n    type: 'both'\n  }, {\n    text: RENAME,\n    type: 'both',\n    needNameInput: true\n  }];\n}\n\nexport function CateTree(props) {\n  _s();\n\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  const [nodes, setNodes] = useState(data);\n  const [fileToAdd, setFileToAdd] = useState(null);\n  const [folderToAdd, setFolderToAdd] = useState(null);\n  const [newNameFile, setNameFile] = useState(null);\n  const [fileToDelete, setFileToDelete] = useState(null);\n\n  const getFatherPath = path => {\n    const regex = RegExp('(.*)\\\\/.+$', 'gm');\n    let father_node = regex.exec(path) || null;\n    return father_node != null ? father_node[1] : null;\n  };\n\n  const getOldNodePath = path => {\n    const regex = RegExp('(.*)\\\\s(.+)$', 'gm');\n    let node = regex.exec(path) || null;\n    return node != null ? [node[1], node[2]] : [null, null];\n  };\n\n  const onRename = newName => {\n    if (newName) {\n      let [old_node, name] = getOldNodePath(newName);\n      if (old_node == null || name == null) return; // in case renaming the root\n\n      let new_node = `/${name}`;\n      let nodes_copy = JSON.parse(JSON.stringify(nodes));\n\n      if (!nodes_copy[old_node].isRoot) {\n        let father_path = getFatherPath(newName);\n\n        if (father_path == null) {\n          return;\n        }\n\n        new_node = `${father_path}/${name}`;\n\n        if (new_node in nodes) {\n          alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n          return;\n        }\n\n        nodes_copy[father_path].children = nodes_copy[father_path].children.filter(item => item !== old_node);\n        nodes_copy[father_path].children.push(new_node);\n      } else {\n        // case renaming root name, and already have another root with the specific name\n        let root_nodes = getRootNodes();\n\n        if (root_nodes.includes(new_node)) {\n          alert(`There is already a different root with this name,\\n Please insert different name!`);\n          return;\n        }\n      }\n\n      renameChild(nodes_copy, old_node, new_node);\n      console.log(`Renaming ${old_node} to ${new_node}`);\n      setNodes(nodes_copy);\n    }\n  };\n\n  const onDelete = (nodes_copy, file) => {\n    if (file) {\n      if (nodes_copy[file].type === FOLDER) {\n        nodes_copy[fileToDelete].children.forEach(child => {\n          onDelete(nodes_copy, nodes_copy[child].path);\n        });\n      }\n\n      if (!nodes_copy[file].isRoot) {\n        let father_path = getFatherPath(file);\n\n        if (father_path == null || nodes[father_path].type === FILE) {\n          return;\n        }\n\n        nodes_copy[father_path].children = nodes_copy[father_path].children.filter(item => item !== file);\n      }\n\n      delete nodes_copy[file];\n    }\n  };\n\n  const onAdd = (newFile, is_file) => {\n    if (newFile) {\n      if (newFile in nodes) {\n        alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n        return;\n      }\n\n      let nodes_copy = JSON.parse(JSON.stringify(nodes));\n      let father_path = getFatherPath(newFile);\n\n      if (father_path == null || nodes[father_path].type === 'file') {\n        return;\n      }\n\n      nodes_copy[father_path].children.push(newFile);\n      nodes_copy[newFile] = is_file ? {\n        path: newFile,\n        type: 'file',\n        isOpen: false\n      } : {\n        path: newFile,\n        type: 'folder',\n        isOpen: false,\n        children: []\n      };\n      console.log(`Adding ${is_file ? 'file' : 'folder'} ${newFile}`);\n      setNodes(nodes_copy);\n    }\n  };\n\n  const renameChild = (nodes_copy, old_name, new_name) => {\n    _.forEach(nodes_copy[old_name].children, child => {\n      renameChild(nodes_copy, child, `${new_name}/${last(child.split('/'))}`);\n    }); // nodes_copy[old_name].children.forEach( (child) => {\n    //     renameChild(nodes_copy, child, `${new_name}/${last(child.split('/'))}`);\n    // });\n    // let new_children = nodes_copy[old_name].children.map( (child) => {\n    //     return `${new_name}/${last(child.split('/'))}`;\n    // });\n\n\n    let new_children = _.map(nodes_copy[old_name].children, child => {\n      return `${new_name}/${last(child.split('/'))}`;\n    });\n\n    nodes_copy[new_name] = { ...nodes_copy[old_name],\n      path: new_name,\n      children: new_children\n    };\n    delete nodes_copy[old_name];\n  };\n\n  const items = getItemsContextMenu();\n  const setters = {\n    ADD: setFileToAdd,\n    ADDFO: setFolderToAdd,\n    RNAME: setNameFile,\n    DEL: setFileToDelete\n  };\n  useEffect(() => {\n    onAdd(fileToAdd, true);\n  }, [fileToAdd]);\n  useEffect(() => {\n    onAdd(folderToAdd, false);\n  }, [folderToAdd]);\n  useEffect(() => {\n    onRename(newNameFile);\n  }, [newNameFile]);\n  useEffect(() => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    onDelete(nodes_copy, fileToDelete); // gal should check it\n\n    setNodes(nodes_copy);\n    console.log(`Deleting file ${fileToDelete}`);\n  }, [fileToDelete]);\n\n  const getRootNodes = () => {\n    return _.values(nodes).filter(node => node.isRoot === true);\n  };\n\n  const onToggle = node => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    nodes_copy[node.path].isOpen = !node.isOpen;\n    setNodes(nodes_copy);\n  };\n\n  const getChildNodes = node => {\n    return node.children ? node.children.map(path => nodes[path]) : [];\n  };\n\n  const root = getRootNodes();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: root.map(node => /*#__PURE__*/_jsxDEV(Node, {\n      node: node,\n      getChildren: getChildNodes,\n      level: 1,\n      onToggle: onToggle,\n      menuItems: items,\n      setters: setters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 37\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CateTree, \"oeyfkiU6JMEBBAcVIWkECKAds7U=\");\n\n_c = CateTree;\nexport default CateTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"CateTree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/CateTree.js"],"names":["React","Component","useEffect","useState","values","last","_","Node","ADD_FILE","ADD_FOLDER","RENAME","DELETE","ADD","ADDFO","RNAME","DEL","FILE","FOLDER","data","path","type","isRoot","isOpen","children","getItemsContextMenu","text","needNameInput","CateTree","props","nodes","setNodes","fileToAdd","setFileToAdd","folderToAdd","setFolderToAdd","newNameFile","setNameFile","fileToDelete","setFileToDelete","getFatherPath","regex","RegExp","father_node","exec","getOldNodePath","node","onRename","newName","old_node","name","new_node","nodes_copy","JSON","parse","stringify","father_path","alert","filter","item","push","root_nodes","getRootNodes","includes","renameChild","console","log","onDelete","file","forEach","child","onAdd","newFile","is_file","old_name","new_name","split","new_children","map","items","setters","onToggle","getChildNodes","root"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\r\nimport values from 'lodash/values';\r\nimport last from 'lodash/last';\r\nimport _ from 'lodash';\r\n\r\nimport Node from \"./Node.js\";\r\nimport {ADD_FILE, ADD_FOLDER, RENAME, DELETE, ADD, ADDFO, RNAME, DEL, FILE, FOLDER} from \"../utills/constants\";\r\n\r\nconst data = {\r\n    '/root': {\r\n        path: '/root',\r\n        type: 'folder',\r\n        isRoot: true,\r\n        isOpen: false,\r\n        children: ['/root/gal', '/root/ben']\r\n    },\r\n    '/root/gal': {\r\n        path: '/root/gal',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: ['/root/gal/read.txt']\r\n    },\r\n    '/root/ben': {\r\n        path: '/root/ben',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: []\r\n    },\r\n    '/root/gal/read.txt': {\r\n        path: '/root/gal/read.txt',\r\n        type: 'file',\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\nfunction getItemsContextMenu(){\r\n    return [\r\n        {\r\n            text: ADD_FILE,\r\n            type: 'folder',\r\n            needNameInput: true,\r\n        },\r\n        {\r\n            text: ADD_FOLDER,\r\n            type: 'folder',\r\n            needNameInput: true,\r\n        },\r\n        {\r\n            text: DELETE,\r\n            type: 'both',\r\n        },\r\n        {\r\n            text: RENAME,\r\n            type: 'both',\r\n            needNameInput: true,\r\n        }\r\n    ];\r\n}\r\n\r\nexport function CateTree(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    const [nodes, setNodes] = useState(data);\r\n    const [fileToAdd, setFileToAdd] = useState(null);\r\n    const [folderToAdd, setFolderToAdd] = useState(null);\r\n    const [newNameFile, setNameFile] = useState(null);\r\n    const [fileToDelete, setFileToDelete] = useState(null);\r\n\r\n    const getFatherPath = (path) => {\r\n        const regex = RegExp('(.*)\\\\/.+$', 'gm');\r\n        let father_node = regex.exec(path) || null;\r\n        return father_node != null ? father_node[1] : null;\r\n    }\r\n    const getOldNodePath = (path) => {\r\n        const regex = RegExp('(.*)\\\\s(.+)$', 'gm');\r\n        let node = regex.exec(path) || null;\r\n        return node != null ? [node[1], node[2]] : [null, null];\r\n    }\r\n\r\n    const onRename = (newName) => {\r\n        if(newName){\r\n            let [old_node, name] = getOldNodePath(newName);\r\n            if(old_node == null || name == null)\r\n                return;\r\n            // in case renaming the root\r\n            let new_node = `/${name}`;\r\n            let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n            if(!nodes_copy[old_node].isRoot){\r\n                let father_path = getFatherPath(newName);\r\n                if(father_path == null){\r\n                    return;\r\n                }\r\n                new_node = `${father_path}/${name}`;\r\n                if (new_node in nodes){\r\n                    alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n                    return;\r\n                }\r\n                nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== old_node)\r\n                nodes_copy[father_path].children.push(new_node);\r\n            }\r\n            else{\r\n                // case renaming root name, and already have another root with the specific name\r\n                let root_nodes = getRootNodes();\r\n                if (root_nodes.includes(new_node)){\r\n                    alert(`There is already a different root with this name,\\n Please insert different name!`);\r\n                    return;\r\n                }\r\n            }\r\n            renameChild(nodes_copy, old_node, new_node);\r\n            console.log(`Renaming ${old_node} to ${new_node}`);\r\n            setNodes(nodes_copy);\r\n        }\r\n    };\r\n    const onDelete = (nodes_copy, file) => {\r\n        if(file){\r\n            if(nodes_copy[file].type === FOLDER){\r\n                nodes_copy[fileToDelete].children.forEach( (child) =>{\r\n                    onDelete(nodes_copy, nodes_copy[child].path);\r\n                })\r\n            }\r\n            if(!nodes_copy[file].isRoot){\r\n                let father_path = getFatherPath(file);\r\n                if(father_path == null || nodes[father_path].type === FILE){\r\n                    return;\r\n                }\r\n                nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== file);\r\n            }\r\n\r\n            delete nodes_copy[file];\r\n        }\r\n    }\r\n    const onAdd = (newFile, is_file) => {\r\n        if(newFile){\r\n            if (newFile in nodes){\r\n                alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n                return;\r\n            }\r\n            let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n            let father_path = getFatherPath(newFile);\r\n            if(father_path == null || nodes[father_path].type === 'file'){\r\n                return;\r\n            }\r\n            nodes_copy[father_path].children.push(newFile);\r\n\r\n            nodes_copy[newFile] = is_file ? {\r\n                path: newFile,\r\n                type: 'file',\r\n                isOpen: false\r\n            } : {\r\n                path: newFile,\r\n                type: 'folder',\r\n                isOpen: false,\r\n                children: []\r\n            }\r\n            console.log(`Adding ${is_file ? 'file' : 'folder'} ${newFile}`);\r\n            setNodes(nodes_copy);\r\n        }\r\n    };\r\n\r\n    const renameChild = (nodes_copy, old_name, new_name) => {\r\n        _.forEach(nodes_copy[old_name].children, (child) => {\r\n            renameChild(nodes_copy, child, `${new_name}/${last(child.split('/'))}`);\r\n        });\r\n        // nodes_copy[old_name].children.forEach( (child) => {\r\n        //     renameChild(nodes_copy, child, `${new_name}/${last(child.split('/'))}`);\r\n        // });\r\n\r\n        // let new_children = nodes_copy[old_name].children.map( (child) => {\r\n        //     return `${new_name}/${last(child.split('/'))}`;\r\n        // });\r\n        let new_children = _.map(nodes_copy[old_name].children, (child) => {\r\n            return `${new_name}/${last(child.split('/'))}`;\r\n        })\r\n        nodes_copy[new_name] = {\r\n            ...nodes_copy[old_name],\r\n            path: new_name,\r\n            children: new_children\r\n        }\r\n        delete nodes_copy[old_name];\r\n\r\n    }\r\n    const items = getItemsContextMenu();\r\n    const setters = {\r\n        ADD: setFileToAdd,\r\n        ADDFO: setFolderToAdd,\r\n        RNAME: setNameFile,\r\n        DEL: setFileToDelete,\r\n    }\r\n\r\n    useEffect(() => {\r\n        onAdd(fileToAdd, true);\r\n    }, [fileToAdd])\r\n    useEffect(() => {\r\n        onAdd(folderToAdd, false);\r\n    }, [folderToAdd])\r\n    useEffect(() => {\r\n        onRename(newNameFile);\r\n    }, [newNameFile])\r\n    useEffect(() => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        onDelete(nodes_copy, fileToDelete);\r\n        // gal should check it\r\n        setNodes(nodes_copy);\r\n        console.log(`Deleting file ${fileToDelete}`);\r\n    }, [fileToDelete])\r\n\r\n    const getRootNodes = () => {\r\n        return _.values(nodes).filter(node => node.isRoot === true);\r\n    }\r\n    const onToggle = (node) => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        nodes_copy[node.path].isOpen = !node.isOpen;\r\n        setNodes(nodes_copy);\r\n    }\r\n    const getChildNodes = (node) => {\r\n        return node.children ? node.children.map(path => nodes[path]) : [];\r\n    }\r\n    const root = getRootNodes();\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                root.map((node) => (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n                                        menuItems={items} setters={setters}/>))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CateTree;"]},"metadata":{},"sourceType":"module"}