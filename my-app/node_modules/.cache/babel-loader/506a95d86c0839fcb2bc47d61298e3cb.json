{"ast":null,"code":"import { ADD_FILE, ADD_FOLDER, DELETE, FILE, FOLDER, RENAME } from \"./constants\";\nimport _ from \"lodash\";\nexport const getFatherPath = path => {\n  const regex = RegExp('(.*)\\\\/.+$', 'gm');\n  let father_node = regex.exec(path) || null;\n  return father_node != null ? father_node[1] : null;\n};\nexport const getOldNodePath = path => {\n  const regex = RegExp('(.*)\\\\s(.+)$', 'gm');\n  let node = regex.exec(path) || null;\n  return node != null ? [node[1], node[2]] : [null, null];\n};\nexport const renameChild = (nodes_copy, old_name, new_name) => {\n  _.forEach(nodes_copy[old_name].children, child => {\n    renameChild(nodes_copy, child, `${new_name}/${_.last(child.split('/'))}`);\n  });\n\n  let new_children = _.map(nodes_copy[old_name].children, child => {\n    return `${new_name}/${_.last(child.split('/'))}`;\n  });\n\n  nodes_copy[new_name] = { ...nodes_copy[old_name],\n    path: new_name,\n    children: new_children\n  };\n  delete nodes_copy[old_name];\n};\nexport function getItemsContextMenu() {\n  return [{\n    text: ADD_FILE,\n    type: 'folder',\n    needNameInput: true\n  }, {\n    text: ADD_FOLDER,\n    type: 'folder',\n    needNameInput: true\n  }, {\n    text: DELETE,\n    type: 'both'\n  }, {\n    text: RENAME,\n    type: 'both',\n    needNameInput: true\n  }];\n}","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/utills/utills.js"],"names":["ADD_FILE","ADD_FOLDER","DELETE","FILE","FOLDER","RENAME","_","getFatherPath","path","regex","RegExp","father_node","exec","getOldNodePath","node","renameChild","nodes_copy","old_name","new_name","forEach","children","child","last","split","new_children","map","getItemsContextMenu","text","type","needNameInput"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,UAAlB,EAA8BC,MAA9B,EAAsCC,IAAtC,EAA4CC,MAA5C,EAAoDC,MAApD,QAAiE,aAAjE;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,aAAa,GAAIC,IAAD,IAAU;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAAC,YAAD,EAAe,IAAf,CAApB;AACA,MAAIC,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWJ,IAAX,KAAoB,IAAtC;AACA,SAAOG,WAAW,IAAI,IAAf,GAAsBA,WAAW,CAAC,CAAD,CAAjC,GAAuC,IAA9C;AACH,CAJM;AAKP,OAAO,MAAME,cAAc,GAAIL,IAAD,IAAU;AACpC,QAAMC,KAAK,GAAGC,MAAM,CAAC,cAAD,EAAiB,IAAjB,CAApB;AACA,MAAII,IAAI,GAAGL,KAAK,CAACG,IAAN,CAAWJ,IAAX,KAAoB,IAA/B;AACA,SAAOM,IAAI,IAAI,IAAR,GAAe,CAACA,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAf,GAAoC,CAAC,IAAD,EAAO,IAAP,CAA3C;AACH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,UAAD,EAAaC,QAAb,EAAuBC,QAAvB,KAAoC;AAC3DZ,EAAAA,CAAC,CAACa,OAAF,CAAUH,UAAU,CAACC,QAAD,CAAV,CAAqBG,QAA/B,EAA0CC,KAAD,IAAW;AAChDN,IAAAA,WAAW,CAACC,UAAD,EAAaK,KAAb,EAAqB,GAAEH,QAAS,IAAGZ,CAAC,CAACgB,IAAF,CAAOD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAP,CAAyB,EAA5D,CAAX;AACH,GAFD;;AAGA,MAAIC,YAAY,GAAGlB,CAAC,CAACmB,GAAF,CAAMT,UAAU,CAACC,QAAD,CAAV,CAAqBG,QAA3B,EAAsCC,KAAD,IAAW;AAC/D,WAAQ,GAAEH,QAAS,IAAGZ,CAAC,CAACgB,IAAF,CAAOD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAP,CAAyB,EAA/C;AACH,GAFkB,CAAnB;;AAGAP,EAAAA,UAAU,CAACE,QAAD,CAAV,GAAuB,EACnB,GAAGF,UAAU,CAACC,QAAD,CADM;AAEnBT,IAAAA,IAAI,EAAEU,QAFa;AAGnBE,IAAAA,QAAQ,EAAEI;AAHS,GAAvB;AAKA,SAAOR,UAAU,CAACC,QAAD,CAAjB;AAEH,CAdM;AAgBP,OAAO,SAASS,mBAAT,GAA+B;AAClC,SAAO,CACH;AACIC,IAAAA,IAAI,EAAE3B,QADV;AAEI4B,IAAAA,IAAI,EAAE,QAFV;AAGIC,IAAAA,aAAa,EAAE;AAHnB,GADG,EAMH;AACIF,IAAAA,IAAI,EAAE1B,UADV;AAEI2B,IAAAA,IAAI,EAAE,QAFV;AAGIC,IAAAA,aAAa,EAAE;AAHnB,GANG,EAWH;AACIF,IAAAA,IAAI,EAAEzB,MADV;AAEI0B,IAAAA,IAAI,EAAE;AAFV,GAXG,EAeH;AACID,IAAAA,IAAI,EAAEtB,MADV;AAEIuB,IAAAA,IAAI,EAAE,MAFV;AAGIC,IAAAA,aAAa,EAAE;AAHnB,GAfG,CAAP;AAqBH","sourcesContent":["import {ADD_FILE, ADD_FOLDER, DELETE, FILE, FOLDER, RENAME} from \"./constants\";\r\nimport _ from \"lodash\";\r\n\r\nexport const getFatherPath = (path) => {\r\n    const regex = RegExp('(.*)\\\\/.+$', 'gm');\r\n    let father_node = regex.exec(path) || null;\r\n    return father_node != null ? father_node[1] : null;\r\n}\r\nexport const getOldNodePath = (path) => {\r\n    const regex = RegExp('(.*)\\\\s(.+)$', 'gm');\r\n    let node = regex.exec(path) || null;\r\n    return node != null ? [node[1], node[2]] : [null, null];\r\n}\r\n\r\nexport const renameChild = (nodes_copy, old_name, new_name) => {\r\n    _.forEach(nodes_copy[old_name].children, (child) => {\r\n        renameChild(nodes_copy, child, `${new_name}/${_.last(child.split('/'))}`);\r\n    });\r\n    let new_children = _.map(nodes_copy[old_name].children, (child) => {\r\n        return `${new_name}/${_.last(child.split('/'))}`;\r\n    })\r\n    nodes_copy[new_name] = {\r\n        ...nodes_copy[old_name],\r\n        path: new_name,\r\n        children: new_children\r\n    }\r\n    delete nodes_copy[old_name];\r\n\r\n}\r\n\r\nexport function getItemsContextMenu() {\r\n    return [\r\n        {\r\n            text: ADD_FILE,\r\n            type: 'folder',\r\n            needNameInput: true,\r\n        },\r\n        {\r\n            text: ADD_FOLDER,\r\n            type: 'folder',\r\n            needNameInput: true,\r\n        },\r\n        {\r\n            text: DELETE,\r\n            type: 'both',\r\n        },\r\n        {\r\n            text: RENAME,\r\n            type: 'both',\r\n            needNameInput: true,\r\n        }\r\n    ];\r\n}"]},"metadata":{},"sourceType":"module"}