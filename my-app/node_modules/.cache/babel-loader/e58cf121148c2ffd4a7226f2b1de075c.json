{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { renameChild, getFatherPath, getOldNodePath, getItemsContextMenu } from '../utills/utills';\nimport Node from \"./Node.js\";\nimport { FILE, FOLDER } from \"../utills/constants\";\nimport { useHistory } from 'react-router-dom';\nimport Tree from \"./Tree\";\nimport queryString from 'query-string';\nconst data = {\n  '/root': {\n    path: '/root',\n    type: FOLDER,\n    isRoot: true,\n    isOpen: false,\n    children: ['/root/gal', '/root/ben']\n  },\n  '/root2': {\n    path: '/root2',\n    type: FOLDER,\n    isRoot: true,\n    isOpen: false,\n    children: ['/root2/gal2']\n  },\n  '/root2/gal2': {\n    path: '/root/gal2',\n    type: FOLDER,\n    isRoot: false,\n    isOpen: false,\n    children: []\n  },\n  '/root/gal': {\n    path: '/root/gal',\n    type: FOLDER,\n    isOpen: false,\n    children: ['/root/gal/read.txt']\n  },\n  '/root/ben': {\n    path: '/root/ben',\n    type: FOLDER,\n    isOpen: false,\n    children: []\n  },\n  '/root/gal/read.txt': {\n    path: '/root/gal/read.txt',\n    type: FILE,\n    isOpen: false\n  }\n};\nexport function CategoryTree(props) {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [treeData, setTreeData] = useState(null);\n  const history = useHistory();\n\n  const newSearchClicked = () => {\n    history.push(`${process.env.PUBLIC_URL}/`);\n  };\n\n  const fetchTree = async id => {\n    //let res = await fetch(`${process.env.PUBLIC_URL}/calculate_tree?treeid=${id}`);\n    //return await res.json();\n    let new_data = _.filter(_.values(data), node => {\n      return node.startsWith(id);\n    });\n\n    return await new_data.json(); //return await data.json();\n  };\n\n  useEffect(() => {\n    const onFirstRender = async () => {\n      setLoading(true);\n      let parsed = queryString.parse(window.location.search);\n\n      if (!parsed || !parsed.id) {\n        alert('problem with getting category tree..');\n        history.push(`${process.env.PUBLIC_URL}/`);\n        return;\n      }\n\n      let tree_data = await fetchTree(parsed.id);\n\n      if (!tree_data) {\n        alert('problem with getting category tree.\\n the id which given is not found..');\n        history.push(`${process.env.PUBLIC_URL}/`);\n        return;\n      } //let res = buildTree(tree_data, true);\n\n\n      setTreeData(tree_data); //window.addEventListener('resize', centerTree);\n\n      setLoading(false);\n    };\n\n    onFirstRender();\n  }, [history]);\n}\n\n_s(CategoryTree, \"d59Vjw86UuDPL66kU4ceA20dt5w=\", false, function () {\n  return [useHistory];\n});\n\n_c = CategoryTree;\nexport default CategoryTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryTree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/CategoryTree.js"],"names":["React","useEffect","useState","_","renameChild","getFatherPath","getOldNodePath","getItemsContextMenu","Node","FILE","FOLDER","useHistory","Tree","queryString","data","path","type","isRoot","isOpen","children","CategoryTree","props","loading","setLoading","treeData","setTreeData","history","newSearchClicked","push","process","env","PUBLIC_URL","fetchTree","id","new_data","filter","values","node","startsWith","json","onFirstRender","parsed","parse","window","location","search","alert","tree_data"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAAQC,WAAR,EAAqBC,aAArB,EAAoCC,cAApC,EAAoDC,mBAApD,QAA8E,kBAA9E;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,qBAA3B;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAIA,MAAMC,IAAI,GAAG;AACT,WAAS;AACLC,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,IAAI,EAAEN,MAFD;AAGLO,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,MAAM,EAAE,KAJH;AAKLC,IAAAA,QAAQ,EAAE,CAAC,WAAD,EAAc,WAAd;AALL,GADA;AAQT,YAAU;AACNJ,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,IAAI,EAAEN,MAFA;AAGNO,IAAAA,MAAM,EAAE,IAHF;AAINC,IAAAA,MAAM,EAAE,KAJF;AAKNC,IAAAA,QAAQ,EAAE,CAAC,aAAD;AALJ,GARD;AAeT,iBAAe;AACXJ,IAAAA,IAAI,EAAE,YADK;AAEXC,IAAAA,IAAI,EAAEN,MAFK;AAGXO,IAAAA,MAAM,EAAE,KAHG;AAIXC,IAAAA,MAAM,EAAE,KAJG;AAKXC,IAAAA,QAAQ,EAAE;AALC,GAfN;AAsBT,eAAa;AACTJ,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,IAAI,EAAEN,MAFG;AAGTQ,IAAAA,MAAM,EAAE,KAHC;AAITC,IAAAA,QAAQ,EAAE,CAAC,oBAAD;AAJD,GAtBJ;AA4BT,eAAa;AACTJ,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,IAAI,EAAEN,MAFG;AAGTQ,IAAAA,MAAM,EAAE,KAHC;AAITC,IAAAA,QAAQ,EAAE;AAJD,GA5BJ;AAkCT,wBAAsB;AAClBJ,IAAAA,IAAI,EAAE,oBADY;AAElBC,IAAAA,IAAI,EAAEP,IAFY;AAGlBS,IAAAA,MAAM,EAAE;AAHU;AAlCb,CAAb;AAyCA,OAAO,SAASE,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,IAAD,CAAxC;AAEA,QAAMwB,OAAO,GAAGf,UAAU,EAA1B;;AAEA,QAAMgB,gBAAgB,GAAG,MAAM;AAC3BD,IAAAA,OAAO,CAACE,IAAR,CAAc,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,GAAvC;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAOC,EAAP,IAAc;AAC5B;AACA;AACA,QAAIC,QAAQ,GAAG/B,CAAC,CAACgC,MAAF,CAAShC,CAAC,CAACiC,MAAF,CAAStB,IAAT,CAAT,EAA0BuB,IAAD,IAAU;AAAE,aAAOA,IAAI,CAACC,UAAL,CAAgBL,EAAhB,CAAP;AAA4B,KAAjE,CAAf;;AACA,WAAO,MAAMC,QAAQ,CAACK,IAAT,EAAb,CAJ4B,CAK5B;AACH,GAND;;AAQAtC,EAAAA,SAAS,CAAE,MAAM;AACb,UAAMuC,aAAa,GAAG,YAAY;AAC9BjB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAIkB,MAAM,GAAG5B,WAAW,CAAC6B,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBC,MAAlC,CAAb;;AACA,UAAG,CAACJ,MAAD,IAAW,CAACA,MAAM,CAACR,EAAtB,EAAyB;AACrBa,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACApB,QAAAA,OAAO,CAACE,IAAR,CAAc,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,GAAvC;AACA;AACH;;AACD,UAAIgB,SAAS,GAAG,MAAMf,SAAS,CAACS,MAAM,CAACR,EAAR,CAA/B;;AACA,UAAG,CAACc,SAAJ,EAAc;AACVD,QAAAA,KAAK,CAAC,yEAAD,CAAL;AACApB,QAAAA,OAAO,CAACE,IAAR,CAAc,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,GAAvC;AACA;AACH,OAb6B,CAc9B;;;AACAN,MAAAA,WAAW,CAACsB,SAAD,CAAX,CAf8B,CAgB9B;;AACAxB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAlBD;;AAoBAiB,IAAAA,aAAa;AAChB,GAtBQ,EAsBN,CAACd,OAAD,CAtBM,CAAT;AAwBH;;GA1CeN,Y;UAIIT,U;;;KAJJS,Y;AA4ChB,eAAeA,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport _ from 'lodash';\r\nimport {renameChild, getFatherPath, getOldNodePath, getItemsContextMenu} from '../utills/utills'\r\nimport Node from \"./Node.js\";\r\nimport {FILE, FOLDER} from \"../utills/constants\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport Tree from \"./Tree\";\r\nimport queryString from 'query-string'\r\n\r\n\r\n\r\nconst data = {\r\n    '/root': {\r\n        path: '/root',\r\n        type: FOLDER,\r\n        isRoot: true,\r\n        isOpen: false,\r\n        children: ['/root/gal', '/root/ben']\r\n    },\r\n    '/root2': {\r\n        path: '/root2',\r\n        type: FOLDER,\r\n        isRoot: true,\r\n        isOpen: false,\r\n        children: ['/root2/gal2']\r\n    },\r\n    '/root2/gal2': {\r\n        path: '/root/gal2',\r\n        type: FOLDER,\r\n        isRoot: false,\r\n        isOpen: false,\r\n        children: []\r\n    },\r\n    '/root/gal': {\r\n        path: '/root/gal',\r\n        type: FOLDER,\r\n        isOpen: false,\r\n        children: ['/root/gal/read.txt']\r\n    },\r\n    '/root/ben': {\r\n        path: '/root/ben',\r\n        type: FOLDER,\r\n        isOpen: false,\r\n        children: []\r\n    },\r\n    '/root/gal/read.txt': {\r\n        path: '/root/gal/read.txt',\r\n        type: FILE,\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\nexport function CategoryTree(props) {\r\n    const [loading, setLoading] = useState(false);\r\n    const [treeData, setTreeData] = useState(null);\r\n\r\n    const history = useHistory();\r\n\r\n    const newSearchClicked = () => {\r\n        history.push(`${process.env.PUBLIC_URL}/`);\r\n    }\r\n\r\n    const fetchTree = async (id) => {\r\n        //let res = await fetch(`${process.env.PUBLIC_URL}/calculate_tree?treeid=${id}`);\r\n        //return await res.json();\r\n        let new_data = _.filter(_.values(data), (node) => { return node.startsWith(id);});\r\n        return await new_data.json();\r\n        //return await data.json();\r\n    }\r\n\r\n    useEffect( () => {\r\n        const onFirstRender = async () => {\r\n            setLoading(true);\r\n            let parsed = queryString.parse(window.location.search);\r\n            if(!parsed || !parsed.id){\r\n                alert('problem with getting category tree..');\r\n                history.push(`${process.env.PUBLIC_URL}/`);\r\n                return;\r\n            }\r\n            let tree_data = await fetchTree(parsed.id);\r\n            if(!tree_data){\r\n                alert('problem with getting category tree.\\n the id which given is not found..');\r\n                history.push(`${process.env.PUBLIC_URL}/`);\r\n                return;\r\n            }\r\n            //let res = buildTree(tree_data, true);\r\n            setTreeData(tree_data);\r\n            //window.addEventListener('resize', centerTree);\r\n            setLoading(false);\r\n        }\r\n\r\n        onFirstRender();\r\n    }, [history]);\r\n\r\n}\r\n\r\nexport default CategoryTree;\r\n"]},"metadata":{},"sourceType":"module"}