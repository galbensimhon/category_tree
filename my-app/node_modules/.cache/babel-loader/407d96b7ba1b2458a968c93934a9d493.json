{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\Node.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport last from 'lodash/last';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { FaFile, FaFolder, FaFolderOpen, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport values from \"lodash/values\";\nimport MyContextMenu from \"./MyContextMenu\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport FormDialog from \"./FormDialog\";\nimport { DEL, ADD, ADDFO, RNAME } from \"../utills/helpers\"; // TODO: gal add some styles, otherwise delete the imports\n\nexport function Node(props) {\n  _s();\n\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  const {\n    node,\n    getChildren,\n    level,\n    onToggle,\n    menuItems\n  } = props; // const NodeRef = useRef(null);\n\n  const [showContextMenu, setshowContextMenu] = useState(false);\n  const [selectedName, setSelectedName] = useState('');\n\n  const getName = node => last(node.path.split('/'));\n\n  const onContextMenu = () => {\n    setshowContextMenu(true);\n  };\n\n  const handleClick = e => {\n    if (e.type === 'click') {\n      onToggle(node);\n    } else if (e.type === 'contextmenu') {\n      setshowContextMenu(true);\n    }\n  };\n\n  const handleClickOk = (name, type) => {\n    if (type === 'add_file') {\n      props.setters.ADD(`${node.path}/${name}`);\n    } else if (type === 'add_folder') {\n      props.setters.ADDFO(`${node.path}/${name}`);\n    } else if (type === 'rename') {\n      //props.setters[DEL](node.path);\n      //const regex = RegExp('(.*)\\\\/\\\\w+$', 'gm');\n      //let old_node = node.path;\n      //let new_node = regex.exec(node.path);\n      // should cat 'abc' and change to def /.../abc/def\n      props.setters.RNAME(`${node.path}/${name}`);\n    }\n  };\n\n  const handleDeleteClick = () => {\n    props.setters[DEL](node.path);\n  };\n\n  let node_chevron = /*#__PURE__*/_jsxDEV(FaChevronDown, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 24\n  }, this);\n\n  let node_icon = /*#__PURE__*/_jsxDEV(FaFile, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }, this);\n\n  let subtree_node = null; // in case node is folder, otherwise is must be file\n\n  if (node.type === 'folder') {\n    if (node.isOpen) {\n      node_chevron = /*#__PURE__*/_jsxDEV(FaChevronDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 28\n      }, this);\n      node_icon = /*#__PURE__*/_jsxDEV(FaFolderOpen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }, this);\n      subtree_node = getChildren(node).filter(child => child).map(child => /*#__PURE__*/_jsxDEV(Node, { ...props,\n        node: child,\n        level: level + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this));\n    } else {\n      node_chevron = /*#__PURE__*/_jsxDEV(FaChevronRight, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 28\n      }, this);\n      node_icon = /*#__PURE__*/_jsxDEV(FaFolder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this);\n    }\n  }\n\n  let padding_left = level * 40 + (node.type === 'file' ? 40 : 0) + 'px';\n  let items = node.type === 'file' ? menuItems.filter(item => item.type === 'both') : menuItems; //{item.needNameInput ? <FormDialog text={item.text} /> : item.text}\n\n  items = items.map(item => /*#__PURE__*/_jsxDEV(MenuItem\n  /*onClick={() => item.itemClick(node, selectedName)}*/\n  , {\n    children: item.needNameInput ? /*#__PURE__*/_jsxDEV(FormDialog, {\n      text: item.text,\n      setName: handleClickOk\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleDeleteClick,\n      children: item.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this)); // each node have unique path\n\n  let unique_id = node.path;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: padding_left\n      },\n      children: [/*#__PURE__*/_jsxDEV(ContextMenuTrigger, {\n        id: unique_id,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: '5px'\n          },\n          onClick: handleClick,\n          onContextMenu: handleClick,\n          children: [node_icon, getName(node), node_chevron]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), showContextMenu ? /*#__PURE__*/_jsxDEV(ContextMenu, {\n        hideOnLeave: true,\n        id: unique_id,\n        children: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 40\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), subtree_node]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Node, \"8TvGkbxkpFiZrhf5H9mAwYw+bPo=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/Node.js"],"names":["React","useState","useRef","useEffect","last","styled","PropTypes","FaFile","FaFolder","FaFolderOpen","FaChevronDown","FaChevronRight","values","MyContextMenu","ContextMenu","MenuItem","ContextMenuTrigger","FormDialog","DEL","ADD","ADDFO","RNAME","Node","props","node","getChildren","level","onToggle","menuItems","showContextMenu","setshowContextMenu","selectedName","setSelectedName","getName","path","split","onContextMenu","handleClick","e","type","handleClickOk","name","setters","handleDeleteClick","node_chevron","node_icon","subtree_node","isOpen","filter","child","map","padding_left","items","item","needNameInput","text","unique_id","paddingLeft","marginRight"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\r\nimport last from 'lodash/last';\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\nimport { FaFile, FaFolder, FaFolderOpen, FaChevronDown, FaChevronRight } from 'react-icons/fa'\r\nimport values from \"lodash/values\";\r\nimport MyContextMenu from \"./MyContextMenu\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport FormDialog from \"./FormDialog\";\r\nimport {DEL, ADD, ADDFO, RNAME} from \"../utills/helpers\"\r\n\r\n\r\n// TODO: gal add some styles, otherwise delete the imports\r\nexport function Node(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    const { node, getChildren, level, onToggle, menuItems } = props;\r\n    // const NodeRef = useRef(null);\r\n    const [showContextMenu, setshowContextMenu] = useState(false);\r\n    const [selectedName, setSelectedName] = useState('');\r\n\r\n    const getName = (node) => last(node.path.split('/'));\r\n    const onContextMenu = () => {\r\n        setshowContextMenu(true)\r\n    }\r\n    const handleClick = (e) => {\r\n        if (e.type === 'click') {\r\n            onToggle(node);\r\n        } else if (e.type === 'contextmenu') {\r\n            setshowContextMenu(true);\r\n        }\r\n    }\r\n    const handleClickOk = (name, type) => {\r\n        if(type === 'add_file'){\r\n            props.setters.ADD(`${node.path}/${name}`);\r\n        }\r\n        else if(type === 'add_folder'){\r\n            props.setters.ADDFO(`${node.path}/${name}`);\r\n        }\r\n        else if(type === 'rename'){\r\n            //props.setters[DEL](node.path);\r\n\r\n            //const regex = RegExp('(.*)\\\\/\\\\w+$', 'gm');\r\n            //let old_node = node.path;\r\n            //let new_node = regex.exec(node.path);\r\n            // should cat 'abc' and change to def /.../abc/def\r\n            props.setters.RNAME(`${node.path}/${name}`);\r\n        }\r\n    }\r\n    const handleDeleteClick = () => {\r\n        props.setters[DEL](node.path);\r\n    }\r\n\r\n    let node_chevron = <FaChevronDown />;\r\n    let node_icon = <FaFile />;\r\n    let subtree_node = null;\r\n    // in case node is folder, otherwise is must be file\r\n    if(node.type === 'folder'){\r\n        if(node.isOpen){\r\n            node_chevron = <FaChevronDown />;\r\n            node_icon = <FaFolderOpen />;\r\n            subtree_node = getChildren(node).filter((child) => child).map((child) => (\r\n                <Node {...props} node={child} level={level+1} />\r\n            ));\r\n        }\r\n        else{\r\n            node_chevron = <FaChevronRight />;\r\n            node_icon = <FaFolder />;\r\n        }\r\n    }\r\n\r\n    let padding_left = ((level * 40) + (node.type === 'file' ? 40 : 0) ) + 'px';\r\n    let items = node.type === 'file' ? menuItems.filter((item) => item.type === 'both') : menuItems;\r\n    //{item.needNameInput ? <FormDialog text={item.text} /> : item.text}\r\n    items = items.map((item) =>\r\n        <MenuItem /*onClick={() => item.itemClick(node, selectedName)}*/ >\r\n            {\r\n                item.needNameInput ?\r\n                    (<FormDialog text={item.text} setName={handleClickOk} />) :\r\n                (<div onClick={handleDeleteClick}>{item.text}</div>)\r\n            }\r\n        </MenuItem>);\r\n    // each node have unique path\r\n    let unique_id = node.path;\r\n    return(\r\n        <React.Fragment>\r\n            <div style={{paddingLeft: padding_left}} >\r\n                <ContextMenuTrigger id={unique_id}>\r\n                    <div style={{marginRight: '5px'}} onClick={handleClick} onContextMenu={handleClick} >\r\n                        { node_icon }\r\n                        { getName(node) }\r\n                        { node_chevron }\r\n                    </div>\r\n                </ContextMenuTrigger>\r\n                {\r\n                    showContextMenu ? (<ContextMenu hideOnLeave={true} id={unique_id}>{items}</ContextMenu>) : null\r\n                }\r\n            </div>\r\n            { subtree_node }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Node;"]},"metadata":{},"sourceType":"module"}