{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { renameChild, getFatherPath, getOldNodePath, getItemsContextMenu } from '../utills/utills';\nimport Node from \"./Node.js\";\nimport { FILE, FOLDER } from \"../utills/constants\";\nimport { Container } from \"@material-ui/core\";\nimport { useHistory } from 'react-router-dom'; // TODO: should implement save button, and also check if user change the site without saving, change location of onAdd\n\nexport function Tree(props) {\n  _s();\n\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  //const { data, onAdd} = props;\n  //const { onAdd } = props;\n  const {\n    nodes,\n    exposedNodes,\n    onChangeTree,\n    setNodes,\n    onRename\n  } = props; //const [nodes, setNodes] = useState(data);\n\n  const [fileToAdd, setFileToAdd] = useState(null);\n  const [folderToAdd, setFolderToAdd] = useState(null);\n  const [newNameFile, setNameFile] = useState(null);\n  const [fileToDelete, setFileToDelete] = useState(null); //const history = useHistory();\n  // const onRename = (newName) => {\n  //     if(newName){\n  //         let [old_node, name] = getOldNodePath(newName);\n  //         if(old_node == null || name == null)\n  //             return;\n  //         // in case renaming the root\n  //         let new_node = `/${name}`;\n  //         let nodes_copy = JSON.parse(JSON.stringify(nodes));\n  //         if(!nodes_copy[old_node].isRoot){\n  //             let father_path = getFatherPath(newName);\n  //             if(father_path == null){\n  //                 return;\n  //             }\n  //             new_node = `${father_path}/${name}`;\n  //             if (new_node in nodes){\n  //                 alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n  //                 return;\n  //             }\n  //             nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== old_node)\n  //             nodes_copy[father_path].children.push(new_node);\n  //         }\n  //         else{\n  //             // case renaming root name, and already have another root with the specific name\n  //             let root_nodes = getRootNodes(false);\n  //             if (root_nodes.includes(new_node)){\n  //                 alert(`There is already a different root with this name,\\n Please insert different name!`);\n  //                 return;\n  //             }\n  //             history.push(`${process.env.PUBLIC_URL}/categorytree?tree_id=${name}`)\n  //\n  //         }\n  //         renameChild(nodes_copy, old_node, new_node);\n  //         console.log(`Renaming ${old_node} to ${new_node}`);\n  //         setNodes(nodes_copy);\n  //     }\n  // };\n\n  const onDelete = (nodes_copy, file) => {\n    if (file) {\n      if (nodes_copy[file].type === FOLDER) {\n        _.forEach(nodes_copy[file].children, child => {\n          onDelete(nodes_copy, child);\n        }); // nodes_copy[fileToDelete].children.forEach( (child) =>{\n        //     onDelete(nodes_copy, nodes_copy[child].path);\n        // })\n\n      }\n\n      if (!nodes_copy[file].isRoot) {\n        let father_path = getFatherPath(file);\n\n        if (father_path == null || nodes[father_path].type === FILE) {\n          return;\n        }\n\n        nodes_copy[father_path].children = nodes_copy[father_path].children.filter(item => item !== file);\n      }\n\n      delete nodes_copy[file];\n    }\n  };\n\n  const onAdd = (newFile, is_file) => {\n    if (newFile) {\n      if (newFile in nodes) {\n        alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n        return;\n      }\n\n      let nodes_copy = JSON.parse(JSON.stringify(nodes));\n      let father_path = getFatherPath(newFile);\n\n      if (father_path == null || nodes[father_path].type === FILE) {\n        return;\n      }\n\n      nodes_copy[father_path].children.push(newFile);\n      nodes_copy[newFile] = is_file ? {\n        path: newFile,\n        type: FILE,\n        isOpen: false\n      } : {\n        path: newFile,\n        type: FOLDER,\n        isOpen: false,\n        children: []\n      };\n      console.log(`Adding ${is_file ? FILE : FOLDER} ${newFile}`);\n      setNodes(nodes_copy);\n    }\n  };\n\n  const items = getItemsContextMenu();\n  const setters = {\n    ADD: setFileToAdd,\n    ADDFO: setFolderToAdd,\n    RNAME: setNameFile,\n    DEL: setFileToDelete\n  };\n  useEffect(() => {\n    if (fileToAdd === null) {\n      return;\n    }\n\n    onAdd(fileToAdd, true);\n    onChangeTree(true);\n  }, [fileToAdd]);\n  useEffect(() => {\n    if (folderToAdd === null) {\n      return;\n    }\n\n    onAdd(folderToAdd, false);\n    onChangeTree(true);\n  }, [folderToAdd]);\n  useEffect(() => {\n    if (newNameFile === null) {\n      return;\n    }\n\n    onRename(newNameFile);\n    onChangeTree(true);\n  }, [newNameFile]);\n  useEffect(() => {\n    if (fileToDelete === null) {\n      return;\n    }\n\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    onDelete(nodes_copy, fileToDelete);\n    setNodes(nodes_copy);\n    console.log(`Deleting file ${fileToDelete}`);\n    onChangeTree(true);\n  }, [fileToDelete]);\n\n  const getRootNodes = is_exposed => {\n    return _.filter(_.values(is_exposed ? exposedNodes : nodes), node => {\n      return node.isRoot === true;\n    }); //return values(nodes).filter(node => node.isRoot === true);\n  };\n\n  const onToggle = node => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    nodes_copy[node.path].isOpen = !nodes_copy[node.path].isOpen;\n    setNodes(nodes_copy);\n  };\n\n  const getChildNodes = node => {\n    //return node.children ? node.children.map(path => nodes[path]) : [];\n    return _.map(node.children, path => {\n      return nodes[path];\n    });\n  };\n\n  const root = getRootNodes(true);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: 'md',\n    children: _.map(root, node => {\n      return /*#__PURE__*/_jsxDEV(Node, {\n        node: node,\n        getChildren: getChildNodes,\n        level: 1,\n        onToggle: onToggle,\n        menuItems: items,\n        setters: setters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 29\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"qW+j9tLuKKgYzEjdDE0Tw1uSX90=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/Tree.js"],"names":["React","useEffect","useState","_","renameChild","getFatherPath","getOldNodePath","getItemsContextMenu","Node","FILE","FOLDER","Container","useHistory","Tree","props","nodes","exposedNodes","onChangeTree","setNodes","onRename","fileToAdd","setFileToAdd","folderToAdd","setFolderToAdd","newNameFile","setNameFile","fileToDelete","setFileToDelete","onDelete","nodes_copy","file","type","forEach","children","child","isRoot","father_path","filter","item","onAdd","newFile","is_file","alert","JSON","parse","stringify","push","path","isOpen","console","log","items","setters","ADD","ADDFO","RNAME","DEL","getRootNodes","is_exposed","values","node","onToggle","getChildNodes","map","root"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport _ from 'lodash';\r\nimport {renameChild, getFatherPath, getOldNodePath, getItemsContextMenu} from '../utills/utills'\r\nimport Node from \"./Node.js\";\r\nimport {FILE, FOLDER} from \"../utills/constants\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport {useHistory} from 'react-router-dom'\r\n\r\n// TODO: should implement save button, and also check if user change the site without saving, change location of onAdd\r\n\r\nexport function Tree(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    //const { data, onAdd} = props;\r\n    //const { onAdd } = props;\r\n    const { nodes, exposedNodes, onChangeTree, setNodes, onRename } = props;\r\n    //const [nodes, setNodes] = useState(data);\r\n    const [fileToAdd, setFileToAdd] = useState(null);\r\n    const [folderToAdd, setFolderToAdd] = useState(null);\r\n    const [newNameFile, setNameFile] = useState(null);\r\n    const [fileToDelete, setFileToDelete] = useState(null);\r\n    //const history = useHistory();\r\n\r\n    // const onRename = (newName) => {\r\n    //     if(newName){\r\n    //         let [old_node, name] = getOldNodePath(newName);\r\n    //         if(old_node == null || name == null)\r\n    //             return;\r\n    //         // in case renaming the root\r\n    //         let new_node = `/${name}`;\r\n    //         let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n    //         if(!nodes_copy[old_node].isRoot){\r\n    //             let father_path = getFatherPath(newName);\r\n    //             if(father_path == null){\r\n    //                 return;\r\n    //             }\r\n    //             new_node = `${father_path}/${name}`;\r\n    //             if (new_node in nodes){\r\n    //                 alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n    //                 return;\r\n    //             }\r\n    //             nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== old_node)\r\n    //             nodes_copy[father_path].children.push(new_node);\r\n    //         }\r\n    //         else{\r\n    //             // case renaming root name, and already have another root with the specific name\r\n    //             let root_nodes = getRootNodes(false);\r\n    //             if (root_nodes.includes(new_node)){\r\n    //                 alert(`There is already a different root with this name,\\n Please insert different name!`);\r\n    //                 return;\r\n    //             }\r\n    //             history.push(`${process.env.PUBLIC_URL}/categorytree?tree_id=${name}`)\r\n    //\r\n    //         }\r\n    //         renameChild(nodes_copy, old_node, new_node);\r\n    //         console.log(`Renaming ${old_node} to ${new_node}`);\r\n    //         setNodes(nodes_copy);\r\n    //     }\r\n    // };\r\n    const onDelete = (nodes_copy, file) => {\r\n        if(file){\r\n            if(nodes_copy[file].type === FOLDER){\r\n                _.forEach(nodes_copy[file].children, (child) => {\r\n                    onDelete(nodes_copy, child);\r\n                });\r\n                // nodes_copy[fileToDelete].children.forEach( (child) =>{\r\n                //     onDelete(nodes_copy, nodes_copy[child].path);\r\n                // })\r\n            }\r\n            if(!nodes_copy[file].isRoot){\r\n                let father_path = getFatherPath(file);\r\n                if(father_path == null || nodes[father_path].type === FILE){\r\n                    return;\r\n                }\r\n                nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== file);\r\n            }\r\n\r\n            delete nodes_copy[file];\r\n        }\r\n    }\r\n    const onAdd = (newFile, is_file) => {\r\n        if(newFile){\r\n            if (newFile in nodes){\r\n                alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n                return;\r\n            }\r\n            let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n            let father_path = getFatherPath(newFile);\r\n            if(father_path == null || nodes[father_path].type === FILE){\r\n                return;\r\n            }\r\n            nodes_copy[father_path].children.push(newFile);\r\n\r\n            nodes_copy[newFile] = is_file ? {\r\n                path: newFile,\r\n                type: FILE,\r\n                isOpen: false\r\n            } : {\r\n                path: newFile,\r\n                type: FOLDER,\r\n                isOpen: false,\r\n                children: []\r\n            }\r\n            console.log(`Adding ${is_file ? FILE : FOLDER} ${newFile}`);\r\n            setNodes(nodes_copy);\r\n        }\r\n    };\r\n\r\n    const items = getItemsContextMenu();\r\n    const setters = {\r\n        ADD: setFileToAdd,\r\n        ADDFO: setFolderToAdd,\r\n        RNAME: setNameFile,\r\n        DEL: setFileToDelete,\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(fileToAdd === null){\r\n            return;\r\n        }\r\n        onAdd(fileToAdd, true);\r\n        onChangeTree(true);\r\n\r\n    }, [fileToAdd])\r\n    useEffect(() => {\r\n        if(folderToAdd === null){\r\n            return;\r\n        }\r\n        onAdd(folderToAdd, false);\r\n        onChangeTree(true);\r\n\r\n    }, [folderToAdd])\r\n    useEffect(() => {\r\n        if(newNameFile === null){\r\n            return;\r\n        }\r\n        onRename(newNameFile);\r\n        onChangeTree(true);\r\n\r\n    }, [newNameFile])\r\n    useEffect(() => {\r\n        if(fileToDelete === null){\r\n            return;\r\n        }\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        onDelete(nodes_copy, fileToDelete);\r\n        setNodes(nodes_copy);\r\n        console.log(`Deleting file ${fileToDelete}`);\r\n        onChangeTree(true);\r\n    }, [fileToDelete])\r\n\r\n    const getRootNodes = (is_exposed) => {\r\n        return _.filter(_.values(is_exposed ? exposedNodes : nodes), (node) => { return node.isRoot === true;});\r\n        //return values(nodes).filter(node => node.isRoot === true);\r\n    }\r\n    const onToggle = (node) => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        nodes_copy[node.path].isOpen = !nodes_copy[node.path].isOpen;\r\n        setNodes(nodes_copy);\r\n    }\r\n    const getChildNodes = (node) => {\r\n        //return node.children ? node.children.map(path => nodes[path]) : [];\r\n        return _.map(node.children, (path) => {\r\n            return nodes[path];\r\n        });\r\n    }\r\n    const root = getRootNodes(true);\r\n\r\n    return(\r\n        <Container maxWidth={'md'}>\r\n        {\r\n                _.map(root, (node) => {\r\n                    return (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n                              menuItems={items} setters={setters}/>)\r\n                })\r\n        }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Tree;"]},"metadata":{},"sourceType":"module"}