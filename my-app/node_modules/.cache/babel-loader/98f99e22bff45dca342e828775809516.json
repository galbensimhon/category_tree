{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\Node.js\";\nimport React, { useState } from 'react';\nimport last from 'lodash/last';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { FaFile, FaFolder, FaFolderOpen, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport values from \"lodash/values\"; // TODO: gal add some styles, otherwise delete the imports\n\nexport function Node(props) {\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  const {\n    node,\n    getChildren,\n    level,\n    onToggle,\n    onContextMenu\n  } = props;\n\n  const getName = node => last(node.path.split('/'));\n\n  let node_chevron = undefined;\n\n  let node_icon = /*#__PURE__*/_jsxDEV(FaFile, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 21\n  }, this);\n\n  let subtree_node = undefined; // in case node is folder, otherwise is must be file\n\n  if (node.type === 'folder') {\n    if (node.isOpen) {\n      node_chevron = /*#__PURE__*/_jsxDEV(FaChevronDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 28\n      }, this);\n      node_icon = /*#__PURE__*/_jsxDEV(FaFolderOpen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 25\n      }, this);\n      subtree_node = getChildren(node).map(child => /*#__PURE__*/_jsxDEV(Node, { ...props,\n        node: child,\n        level: level + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this));\n    } else {\n      node_chevron = /*#__PURE__*/_jsxDEV(FaChevronRight, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 28\n      }, this);\n      node_icon = /*#__PURE__*/_jsxDEV(FaFolder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      level: level,\n      type: node.type,\n      onClick: () => onToggle(node),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: node_chevron\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        marginRight: 10,\n        children: node_icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: getName(node)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), subtree_node]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/Node.js"],"names":["React","useState","last","styled","PropTypes","FaFile","FaFolder","FaFolderOpen","FaChevronDown","FaChevronRight","values","Node","props","node","getChildren","level","onToggle","onContextMenu","getName","path","split","node_chevron","undefined","node_icon","subtree_node","type","isOpen","map","child"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,YAA3B,EAAyCC,aAAzC,EAAwDC,cAAxD,QAA8E,gBAA9E;AACA,OAAOC,MAAP,MAAmB,eAAnB,C,CAGA;;AACA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACxB;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA,KAArB;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA;AAAtC,MAAwDL,KAA9D;;AAEA,QAAMM,OAAO,GAAIL,IAAD,IAAUX,IAAI,CAACW,IAAI,CAACM,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAD,CAA9B;;AAEA,MAAIC,YAAY,GAAGC,SAAnB;;AACA,MAAIC,SAAS,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UAAhB;;AACA,MAAIC,YAAY,GAAGF,SAAnB,CARwB,CAUxB;;AACA,MAAGT,IAAI,CAACY,IAAL,KAAc,QAAjB,EAA0B;AACtB,QAAGZ,IAAI,CAACa,MAAR,EAAe;AACXL,MAAAA,YAAY,gBAAG,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cAAf;AACAE,MAAAA,SAAS,gBAAG,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAAZ;AACAC,MAAAA,YAAY,GAAGV,WAAW,CAACD,IAAD,CAAX,CAAkBc,GAAlB,CAAuBC,KAAD,iBACjC,QAAC,IAAD,OAAUhB,KAAV;AAAiB,QAAA,IAAI,EAAEgB,KAAvB;AAA8B,QAAA,KAAK,EAAEb,KAAK,GAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,cADW,CAAf;AAGH,KAND,MAOI;AACAM,MAAAA,YAAY,gBAAG,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAAf;AACAE,MAAAA,SAAS,gBAAG,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAAZ;AACH;AACJ;;AAGD,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI;AAAK,MAAA,KAAK,EAAER,KAAZ;AAAmB,MAAA,IAAI,EAAEF,IAAI,CAACY,IAA9B;AAAoC,MAAA,OAAO,EAAE,MAAMT,QAAQ,CAACH,IAAD,CAA3D;AAAA,8BACI;AAAA,kBACMQ;AADN;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,WAAW,EAAE,EAAlB;AAAA,kBACME;AADN;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI;AAAA,kBACML,OAAO,CAACL,IAAD;AADb;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAYMW,YAZN;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;KA1Ceb,I;AA4ChB,eAAeA,IAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport last from 'lodash/last';\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\nimport { FaFile, FaFolder, FaFolderOpen, FaChevronDown, FaChevronRight } from 'react-icons/fa'\r\nimport values from \"lodash/values\";\r\n\r\n\r\n// TODO: gal add some styles, otherwise delete the imports\r\nexport function Node(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    const { node, getChildren, level, onToggle, onContextMenu } = props;\r\n\r\n    const getName = (node) => last(node.path.split('/'));\r\n\r\n    let node_chevron = undefined;\r\n    let node_icon = <FaFile />;\r\n    let subtree_node = undefined;\r\n\r\n    // in case node is folder, otherwise is must be file\r\n    if(node.type === 'folder'){\r\n        if(node.isOpen){\r\n            node_chevron = <FaChevronDown />;\r\n            node_icon = <FaFolderOpen />;\r\n            subtree_node = getChildren(node).map((child) => (\r\n                <Node {...props} node={child} level={level+1} />\r\n            ));\r\n        }\r\n        else{\r\n            node_chevron = <FaChevronRight />;\r\n            node_icon = <FaFolder />;\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div level={level} type={node.type} onClick={() => onToggle(node)}>\r\n                <div>\r\n                    { node_chevron }\r\n                </div>\r\n                <div marginRight={10}>\r\n                    { node_icon }\r\n                </div>\r\n                <span>\r\n                    { getName(node) }\r\n                </span>\r\n            </div>\r\n            { subtree_node }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Node;"]},"metadata":{},"sourceType":"module"}