{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { renameChild, getFatherPath, getOldNodePath, getItemsContextMenu } from '../utills/utills';\nimport Node from \"./Node.js\";\nimport { FILE, FOLDER } from \"../utills/constants\";\nimport { Container } from \"@material-ui/core\";\nimport { useHistory } from 'react-router-dom';\nimport Button from \"@material-ui/core/Button\";\nimport FormDialog from \"./FormDialog\";\nimport Grid from \"@material-ui/core/Grid\";\nimport queryString from \"query-string\";\nimport { loadTree } from '../Api';\nexport function Tree(props) {\n  _s();\n\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  //const { data, onAdd} = props;\n  //const { onAdd } = props;\n  const {\n    nodes,\n    setNodes,\n    onRename,\n    onDelete,\n    onAdd,\n    onLoading,\n    rootName\n  } = props; //const [nodes, setNodes] = useState(data);\n\n  const [fileToAdd, setFileToAdd] = useState(null);\n  const [folderToAdd, setFolderToAdd] = useState(null);\n  const [newNameFile, setNameFile] = useState(null);\n  const [fileToDelete, setFileToDelete] = useState(null); //const [loading, setLoading] = useState(false);\n\n  const history = useHistory(); // TODO: in future will be request api and not data (get exposed data data - getTree(id))\n\n  const fetchTree = async id => {\n    return loadTree(id);\n  };\n\n  const getExposedTree = async () => {\n    onLoading(true);\n    let parsed = queryString.parse(window.location.search);\n\n    if (!parsed || !parsed.tree_id) {\n      alert('problem with getting category tree..');\n      history.push(`${process.env.PUBLIC_URL}/`);\n      return;\n    }\n\n    let tree_data = await fetchTree(parsed.tree_id);\n\n    if (!tree_data) {\n      alert('problem with getting category tree.\\n the id which given is not found..');\n      history.push(`${process.env.PUBLIC_URL}/`);\n      return;\n    }\n\n    onLoading(false);\n    return tree_data;\n  }; // TODO: should delete it\n\n\n  const getExposedTree2 = () => {\n    onLoading(true);\n\n    let tree_data = _.filter(_.values(nodes), node => {\n      return node.path.startsWith(`/${rootName}/`) || node.path === `/${rootName}`;\n    }); //let tree_data = await fetchTree(parsed.tree_id);\n\n\n    if (!tree_data) {\n      alert('problem with getting category tree.\\n the id which given is not found..');\n      history.push(`${process.env.PUBLIC_URL}/`);\n      return;\n    }\n\n    onLoading(false);\n    return tree_data;\n  };\n\n  let exposedNodes = getExposedTree2(); //const history = useHistory();\n  // const onRename = (newName) => {\n  //     if(newName){\n  //         let [old_node, name] = getOldNodePath(newName);\n  //         if(old_node == null || name == null)\n  //             return;\n  //         // in case renaming the root\n  //         let new_node = `/${name}`;\n  //         let nodes_copy = JSON.parse(JSON.stringify(nodes));\n  //         if(!nodes_copy[old_node].isRoot){\n  //             let father_path = getFatherPath(newName);\n  //             if(father_path == null){\n  //                 return;\n  //             }\n  //             new_node = `${father_path}/${name}`;\n  //             if (new_node in nodes){\n  //                 alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n  //                 return;\n  //             }\n  //             nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== old_node)\n  //             nodes_copy[father_path].children.push(new_node);\n  //         }\n  //         else{\n  //             // case renaming root name, and already have another root with the specific name\n  //             let root_nodes = getRootNodes(false);\n  //             if (root_nodes.includes(new_node)){\n  //                 alert(`There is already a different root with this name,\\n Please insert different name!`);\n  //                 return;\n  //             }\n  //             history.push(`${process.env.PUBLIC_URL}/categorytree?tree_id=${name}`)\n  //\n  //         }\n  //         renameChild(nodes_copy, old_node, new_node);\n  //         console.log(`Renaming ${old_node} to ${new_node}`);\n  //         setNodes(nodes_copy);\n  //     }\n  // };\n  // const onDelete = (nodes_copy, file) => {\n  //     if(file){\n  //         if(nodes_copy[file].type === FOLDER){\n  //             _.forEach(nodes_copy[file].children, (child) => {\n  //                 onDelete(nodes_copy, child);\n  //             });\n  //             // nodes_copy[fileToDelete].children.forEach( (child) =>{\n  //             //     onDelete(nodes_copy, nodes_copy[child].path);\n  //             // })\n  //         }\n  //         if(!nodes_copy[file].isRoot){\n  //             let father_path = getFatherPath(file);\n  //             if(father_path == null || nodes[father_path].type === FILE){\n  //                 return;\n  //             }\n  //             nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== file);\n  //         }\n  //\n  //         delete nodes_copy[file];\n  //     }\n  // }\n\n  const items = getItemsContextMenu();\n  const setters = {\n    ADD: onAdd,\n    RNAME: onRename,\n    DEL: onDelete\n  }; // useEffect(() => {\n  //     if(fileToAdd === null){\n  //         return;\n  //     }\n  //     onAdd(fileToAdd, true);\n  //     //onChangeTree(true);\n  //\n  // }, [fileToAdd])\n  // useEffect(() => {\n  //     if(folderToAdd === null){\n  //         return;\n  //     }\n  //     onAdd(folderToAdd, false);\n  //     //onChangeTree(true);\n  //\n  // }, [folderToAdd])\n  // useEffect(() => {\n  //     if(newNameFile === null){\n  //         return;\n  //     }\n  //     onRename(newNameFile);\n  //     //onChangeTree(true);\n  //\n  // }, [newNameFile])\n  // useEffect(() => {\n  //     if(fileToDelete === null){\n  //         return;\n  //     }\n  //     //let nodes_copy = JSON.parse(JSON.stringify(nodes));\n  //     onDelete(fileToDelete);\n  //     //setNodes(nodes_copy);\n  //     //console.log(`Deleting file ${fileToDelete}`);\n  //     //onChangeTree(true);\n  // }, [fileToDelete])\n\n  const getRootNodes = () => {\n    return _.filter(_.values(exposedNodes), node => {\n      return node.isRoot === true;\n    }); //return values(nodes).filter(node => node.isRoot === true);\n  };\n\n  const onToggle = node => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    nodes_copy[node.path].isOpen = !nodes_copy[node.path].isOpen;\n    setNodes(nodes_copy);\n  };\n\n  const getChildNodes = node => {\n    //return node.children ? node.children.map(path => nodes[path]) : [];\n    return _.map(node.children, path => {\n      return nodes[path];\n    });\n  };\n\n  const root = getRootNodes();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: 'md',\n    children: _.map(root, node => {\n      return /*#__PURE__*/_jsxDEV(Node, {\n        node: node,\n        getChildren: getChildNodes,\n        level: 1,\n        onToggle: onToggle,\n        menuItems: items,\n        setters: setters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 29\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"IdevJu/TJda9p6gS63ERthEylkA=\", false, function () {\n  return [useHistory];\n});\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/Tree.js"],"names":["React","useEffect","useState","_","renameChild","getFatherPath","getOldNodePath","getItemsContextMenu","Node","FILE","FOLDER","Container","useHistory","Button","FormDialog","Grid","queryString","loadTree","Tree","props","nodes","setNodes","onRename","onDelete","onAdd","onLoading","rootName","fileToAdd","setFileToAdd","folderToAdd","setFolderToAdd","newNameFile","setNameFile","fileToDelete","setFileToDelete","history","fetchTree","id","getExposedTree","parsed","parse","window","location","search","tree_id","alert","push","process","env","PUBLIC_URL","tree_data","getExposedTree2","filter","values","node","path","startsWith","exposedNodes","items","setters","ADD","RNAME","DEL","getRootNodes","isRoot","onToggle","nodes_copy","JSON","stringify","isOpen","getChildNodes","map","children","root"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport _ from 'lodash';\r\nimport {renameChild, getFatherPath, getOldNodePath, getItemsContextMenu} from '../utills/utills'\r\nimport Node from \"./Node.js\";\r\nimport {FILE, FOLDER} from \"../utills/constants\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormDialog from \"./FormDialog\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport queryString from \"query-string\";\r\nimport { loadTree } from '../Api'\r\n\r\nexport function Tree(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    //const { data, onAdd} = props;\r\n    //const { onAdd } = props;\r\n    const { nodes, setNodes, onRename, onDelete, onAdd, onLoading, rootName } = props;\r\n    //const [nodes, setNodes] = useState(data);\r\n    const [fileToAdd, setFileToAdd] = useState(null);\r\n    const [folderToAdd, setFolderToAdd] = useState(null);\r\n    const [newNameFile, setNameFile] = useState(null);\r\n    const [fileToDelete, setFileToDelete] = useState(null);\r\n    //const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n\r\n    // TODO: in future will be request api and not data (get exposed data data - getTree(id))\r\n    const fetchTree = async (id) => {\r\n        return loadTree(id);\r\n    }\r\n    const getExposedTree = async () => {\r\n        onLoading(true);\r\n        let parsed = queryString.parse(window.location.search);\r\n        if(!parsed || !parsed.tree_id){\r\n            alert('problem with getting category tree..');\r\n            history.push(`${process.env.PUBLIC_URL}/`);\r\n            return;\r\n        }\r\n        let tree_data = await fetchTree(parsed.tree_id);\r\n        if(!tree_data){\r\n            alert('problem with getting category tree.\\n the id which given is not found..');\r\n            history.push(`${process.env.PUBLIC_URL}/`);\r\n            return;\r\n        }\r\n        onLoading(false);\r\n        return tree_data;\r\n    }\r\n    // TODO: should delete it\r\n    const getExposedTree2 = () => {\r\n        onLoading(true);\r\n        let tree_data = _.filter(_.values(nodes), (node) => { return node.path.startsWith(`/${rootName}/`) || node.path === `/${rootName}`;});\r\n        //let tree_data = await fetchTree(parsed.tree_id);\r\n        if(!tree_data){\r\n            alert('problem with getting category tree.\\n the id which given is not found..');\r\n            history.push(`${process.env.PUBLIC_URL}/`);\r\n            return;\r\n        }\r\n        onLoading(false);\r\n        return tree_data;\r\n    }\r\n\r\n    let exposedNodes = getExposedTree2();\r\n\r\n\r\n\r\n    //const history = useHistory();\r\n\r\n    // const onRename = (newName) => {\r\n    //     if(newName){\r\n    //         let [old_node, name] = getOldNodePath(newName);\r\n    //         if(old_node == null || name == null)\r\n    //             return;\r\n    //         // in case renaming the root\r\n    //         let new_node = `/${name}`;\r\n    //         let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n    //         if(!nodes_copy[old_node].isRoot){\r\n    //             let father_path = getFatherPath(newName);\r\n    //             if(father_path == null){\r\n    //                 return;\r\n    //             }\r\n    //             new_node = `${father_path}/${name}`;\r\n    //             if (new_node in nodes){\r\n    //                 alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n    //                 return;\r\n    //             }\r\n    //             nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== old_node)\r\n    //             nodes_copy[father_path].children.push(new_node);\r\n    //         }\r\n    //         else{\r\n    //             // case renaming root name, and already have another root with the specific name\r\n    //             let root_nodes = getRootNodes(false);\r\n    //             if (root_nodes.includes(new_node)){\r\n    //                 alert(`There is already a different root with this name,\\n Please insert different name!`);\r\n    //                 return;\r\n    //             }\r\n    //             history.push(`${process.env.PUBLIC_URL}/categorytree?tree_id=${name}`)\r\n    //\r\n    //         }\r\n    //         renameChild(nodes_copy, old_node, new_node);\r\n    //         console.log(`Renaming ${old_node} to ${new_node}`);\r\n    //         setNodes(nodes_copy);\r\n    //     }\r\n    // };\r\n    // const onDelete = (nodes_copy, file) => {\r\n    //     if(file){\r\n    //         if(nodes_copy[file].type === FOLDER){\r\n    //             _.forEach(nodes_copy[file].children, (child) => {\r\n    //                 onDelete(nodes_copy, child);\r\n    //             });\r\n    //             // nodes_copy[fileToDelete].children.forEach( (child) =>{\r\n    //             //     onDelete(nodes_copy, nodes_copy[child].path);\r\n    //             // })\r\n    //         }\r\n    //         if(!nodes_copy[file].isRoot){\r\n    //             let father_path = getFatherPath(file);\r\n    //             if(father_path == null || nodes[father_path].type === FILE){\r\n    //                 return;\r\n    //             }\r\n    //             nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== file);\r\n    //         }\r\n    //\r\n    //         delete nodes_copy[file];\r\n    //     }\r\n    // }\r\n\r\n    const items = getItemsContextMenu();\r\n    const setters = {\r\n        ADD: onAdd,\r\n        RNAME: onRename,\r\n        DEL: onDelete,\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     if(fileToAdd === null){\r\n    //         return;\r\n    //     }\r\n    //     onAdd(fileToAdd, true);\r\n    //     //onChangeTree(true);\r\n    //\r\n    // }, [fileToAdd])\r\n    // useEffect(() => {\r\n    //     if(folderToAdd === null){\r\n    //         return;\r\n    //     }\r\n    //     onAdd(folderToAdd, false);\r\n    //     //onChangeTree(true);\r\n    //\r\n    // }, [folderToAdd])\r\n    // useEffect(() => {\r\n    //     if(newNameFile === null){\r\n    //         return;\r\n    //     }\r\n    //     onRename(newNameFile);\r\n    //     //onChangeTree(true);\r\n    //\r\n    // }, [newNameFile])\r\n    // useEffect(() => {\r\n    //     if(fileToDelete === null){\r\n    //         return;\r\n    //     }\r\n    //     //let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n    //     onDelete(fileToDelete);\r\n    //     //setNodes(nodes_copy);\r\n    //     //console.log(`Deleting file ${fileToDelete}`);\r\n    //     //onChangeTree(true);\r\n    // }, [fileToDelete])\r\n\r\n    const getRootNodes = () => {\r\n        return _.filter(_.values(exposedNodes), (node) => { return node.isRoot === true;});\r\n        //return values(nodes).filter(node => node.isRoot === true);\r\n    }\r\n    const onToggle = (node) => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        nodes_copy[node.path].isOpen = !nodes_copy[node.path].isOpen;\r\n        setNodes(nodes_copy);\r\n    }\r\n    const getChildNodes = (node) => {\r\n        //return node.children ? node.children.map(path => nodes[path]) : [];\r\n        return _.map(node.children, (path) => {\r\n            return nodes[path];\r\n        });\r\n    }\r\n    const root = getRootNodes();\r\n\r\n    return(\r\n        <Container maxWidth={'md'} >\r\n            {\r\n                _.map(root, (node) => {\r\n                    return (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n                                  menuItems={items} setters={setters} />)\r\n                })\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Tree;"]},"metadata":{},"sourceType":"module"}