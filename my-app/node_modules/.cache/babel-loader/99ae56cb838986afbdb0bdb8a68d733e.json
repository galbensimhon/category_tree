{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\CateTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { renameChild, getFatherPath, getOldNodePath, getItemsContextMenu } from '../utills/utills';\nimport Node from \"./Node.js\";\nimport { FILE, FOLDER } from \"../utills/constants\";\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    isOpen: false,\n    children: ['/root/gal', '/root/ben']\n  },\n  '/root2': {\n    path: '/root2',\n    type: 'folder',\n    isRoot: true,\n    isOpen: false,\n    children: ['/root2/gal2']\n  },\n  '/root2/gal2': {\n    path: '/root/gal2',\n    type: 'folder',\n    isRoot: false,\n    isOpen: false,\n    children: []\n  },\n  '/root/gal': {\n    path: '/root/gal',\n    type: 'folder',\n    isOpen: false,\n    children: ['/root/gal/read.txt']\n  },\n  '/root/ben': {\n    path: '/root/ben',\n    type: 'folder',\n    isOpen: false,\n    children: []\n  },\n  '/root/gal/read.txt': {\n    path: '/root/gal/read.txt',\n    type: 'file',\n    isOpen: false\n  }\n};\nexport function CateTree(props) {\n  _s();\n\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  const [nodes, setNodes] = useState(data);\n  const [fileToAdd, setFileToAdd] = useState(null);\n  const [folderToAdd, setFolderToAdd] = useState(null);\n  const [newNameFile, setNameFile] = useState(null);\n  const [fileToDelete, setFileToDelete] = useState(null);\n\n  const onRename = newName => {\n    if (newName) {\n      let [old_node, name] = getOldNodePath(newName);\n      if (old_node == null || name == null) return; // in case renaming the root\n\n      let new_node = `/${name}`;\n      let nodes_copy = JSON.parse(JSON.stringify(nodes));\n\n      if (!nodes_copy[old_node].isRoot) {\n        let father_path = getFatherPath(newName);\n\n        if (father_path == null) {\n          return;\n        }\n\n        new_node = `${father_path}/${name}`;\n\n        if (new_node in nodes) {\n          alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n          return;\n        }\n\n        nodes_copy[father_path].children = nodes_copy[father_path].children.filter(item => item !== old_node);\n        nodes_copy[father_path].children.push(new_node);\n      } else {\n        // case renaming root name, and already have another root with the specific name\n        let root_nodes = getRootNodes();\n\n        if (root_nodes.includes(new_node)) {\n          alert(`There is already a different root with this name,\\n Please insert different name!`);\n          return;\n        }\n      }\n\n      renameChild(nodes_copy, old_node, new_node);\n      console.log(`Renaming ${old_node} to ${new_node}`);\n      setNodes(nodes_copy);\n    }\n  };\n\n  const onDelete = (nodes_copy, file) => {\n    if (file) {\n      if (nodes_copy[file].type === FOLDER) {\n        _.forEach(nodes_copy[fileToDelete].children, child => {\n          onDelete(nodes_copy, nodes_copy[child].path);\n        }); // nodes_copy[fileToDelete].children.forEach( (child) =>{\n        //     onDelete(nodes_copy, nodes_copy[child].path);\n        // })\n\n      }\n\n      if (!nodes_copy[file].isRoot) {\n        let father_path = getFatherPath(file);\n\n        if (father_path == null || nodes[father_path].type === FILE) {\n          return;\n        }\n\n        nodes_copy[father_path].children = nodes_copy[father_path].children.filter(item => item !== file);\n      }\n\n      delete nodes_copy[file];\n    }\n  };\n\n  const onAdd = (newFile, is_file) => {\n    if (newFile) {\n      if (newFile in nodes) {\n        alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n        return;\n      }\n\n      let nodes_copy = JSON.parse(JSON.stringify(nodes));\n      let father_path = getFatherPath(newFile);\n\n      if (father_path == null || nodes[father_path].type === 'file') {\n        return;\n      }\n\n      nodes_copy[father_path].children.push(newFile);\n      nodes_copy[newFile] = is_file ? {\n        path: newFile,\n        type: 'file',\n        isOpen: false\n      } : {\n        path: newFile,\n        type: 'folder',\n        isOpen: false,\n        children: []\n      };\n      console.log(`Adding ${is_file ? 'file' : 'folder'} ${newFile}`);\n      setNodes(nodes_copy);\n    }\n  };\n\n  const items = getItemsContextMenu();\n  const setters = {\n    ADD: setFileToAdd,\n    ADDFO: setFolderToAdd,\n    RNAME: setNameFile,\n    DEL: setFileToDelete\n  };\n  useEffect(() => {\n    onAdd(fileToAdd, true);\n  }, [fileToAdd]);\n  useEffect(() => {\n    onAdd(folderToAdd, false);\n  }, [folderToAdd]);\n  useEffect(() => {\n    onRename(newNameFile);\n  }, [newNameFile]);\n  useEffect(() => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    onDelete(nodes_copy, fileToDelete); // gal should check it\n\n    setNodes(nodes_copy);\n    console.log(`Deleting file ${fileToDelete}`);\n  }, [fileToDelete]);\n\n  const getRootNodes = () => {\n    return _.filter(_.values(nodes), node => {\n      return node.isRoot === true;\n    }); //return values(nodes).filter(node => node.isRoot === true);\n  };\n\n  const onToggle = node => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    nodes_copy[node.path].isOpen = !node.isOpen;\n    setNodes(nodes_copy);\n  };\n\n  const getChildNodes = node => {\n    //return node.children ? node.children.map(path => nodes[path]) : [];\n    return _.map(node.children, path => {\n      return nodes[path];\n    });\n  };\n\n  const root = getRootNodes();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: _.map(root, node => {\n      return /*#__PURE__*/_jsxDEV(Node, {\n        node: node,\n        getChildren: getChildNodes,\n        level: 1,\n        onToggle: onToggle,\n        menuItems: items,\n        setters: setters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this); // return(\n  //     <div>\n  //         {\n  //             root.map((node) => (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\n  //                                     menuItems={items} setters={setters}/>))\n  //         }\n  //     </div>\n  // )\n}\n\n_s(CateTree, \"oeyfkiU6JMEBBAcVIWkECKAds7U=\");\n\n_c = CateTree;\nexport default CateTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"CateTree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/CateTree.js"],"names":["React","useEffect","useState","_","renameChild","getFatherPath","getOldNodePath","getItemsContextMenu","Node","FILE","FOLDER","data","path","type","isRoot","isOpen","children","CateTree","props","nodes","setNodes","fileToAdd","setFileToAdd","folderToAdd","setFolderToAdd","newNameFile","setNameFile","fileToDelete","setFileToDelete","onRename","newName","old_node","name","new_node","nodes_copy","JSON","parse","stringify","father_path","alert","filter","item","push","root_nodes","getRootNodes","includes","console","log","onDelete","file","forEach","child","onAdd","newFile","is_file","items","setters","ADD","ADDFO","RNAME","DEL","values","node","onToggle","getChildNodes","map","root"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAAQC,WAAR,EAAqBC,aAArB,EAAoCC,cAApC,EAAoDC,mBAApD,QAA8E,kBAA9E;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,qBAA3B;AAEA,MAAMC,IAAI,GAAG;AACT,WAAS;AACLC,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,IAAI,EAAE,QAFD;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,MAAM,EAAE,KAJH;AAKLC,IAAAA,QAAQ,EAAE,CAAC,WAAD,EAAc,WAAd;AALL,GADA;AAQT,YAAU;AACNJ,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,IAAI,EAAE,QAFA;AAGNC,IAAAA,MAAM,EAAE,IAHF;AAINC,IAAAA,MAAM,EAAE,KAJF;AAKNC,IAAAA,QAAQ,EAAE,CAAC,aAAD;AALJ,GARD;AAeT,iBAAe;AACXJ,IAAAA,IAAI,EAAE,YADK;AAEXC,IAAAA,IAAI,EAAE,QAFK;AAGXC,IAAAA,MAAM,EAAE,KAHG;AAIXC,IAAAA,MAAM,EAAE,KAJG;AAKXC,IAAAA,QAAQ,EAAE;AALC,GAfN;AAsBT,eAAa;AACTJ,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,IAAI,EAAE,QAFG;AAGTE,IAAAA,MAAM,EAAE,KAHC;AAITC,IAAAA,QAAQ,EAAE,CAAC,oBAAD;AAJD,GAtBJ;AA4BT,eAAa;AACTJ,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,IAAI,EAAE,QAFG;AAGTE,IAAAA,MAAM,EAAE,KAHC;AAITC,IAAAA,QAAQ,EAAE;AAJD,GA5BJ;AAkCT,wBAAsB;AAClBJ,IAAAA,IAAI,EAAE,oBADY;AAElBC,IAAAA,IAAI,EAAE,MAFY;AAGlBE,IAAAA,MAAM,EAAE;AAHU;AAlCb,CAAb;AAyCA,OAAO,SAASE,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAC5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAACS,IAAD,CAAlC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACuB,WAAD,EAAcC,WAAd,IAA6BxB,QAAQ,CAAC,IAAD,CAA3C;AACA,QAAM,CAACyB,YAAD,EAAeC,eAAf,IAAkC1B,QAAQ,CAAC,IAAD,CAAhD;;AAEA,QAAM2B,QAAQ,GAAIC,OAAD,IAAa;AAC1B,QAAGA,OAAH,EAAW;AACP,UAAI,CAACC,QAAD,EAAWC,IAAX,IAAmB1B,cAAc,CAACwB,OAAD,CAArC;AACA,UAAGC,QAAQ,IAAI,IAAZ,IAAoBC,IAAI,IAAI,IAA/B,EACI,OAHG,CAIP;;AACA,UAAIC,QAAQ,GAAI,IAAGD,IAAK,EAAxB;AACA,UAAIE,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAelB,KAAf,CAAX,CAAjB;;AACA,UAAG,CAACe,UAAU,CAACH,QAAD,CAAV,CAAqBjB,MAAzB,EAAgC;AAC5B,YAAIwB,WAAW,GAAGjC,aAAa,CAACyB,OAAD,CAA/B;;AACA,YAAGQ,WAAW,IAAI,IAAlB,EAAuB;AACnB;AACH;;AACDL,QAAAA,QAAQ,GAAI,GAAEK,WAAY,IAAGN,IAAK,EAAlC;;AACA,YAAIC,QAAQ,IAAId,KAAhB,EAAsB;AAClBoB,UAAAA,KAAK,CAAE,mFAAF,CAAL;AACA;AACH;;AACDL,QAAAA,UAAU,CAACI,WAAD,CAAV,CAAwBtB,QAAxB,GAAmCkB,UAAU,CAACI,WAAD,CAAV,CAAwBtB,QAAxB,CAAiCwB,MAAjC,CAAyCC,IAAD,IAAUA,IAAI,KAAKV,QAA3D,CAAnC;AACAG,QAAAA,UAAU,CAACI,WAAD,CAAV,CAAwBtB,QAAxB,CAAiC0B,IAAjC,CAAsCT,QAAtC;AACH,OAZD,MAaI;AACA;AACA,YAAIU,UAAU,GAAGC,YAAY,EAA7B;;AACA,YAAID,UAAU,CAACE,QAAX,CAAoBZ,QAApB,CAAJ,EAAkC;AAC9BM,UAAAA,KAAK,CAAE,mFAAF,CAAL;AACA;AACH;AACJ;;AACDnC,MAAAA,WAAW,CAAC8B,UAAD,EAAaH,QAAb,EAAuBE,QAAvB,CAAX;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAWhB,QAAS,OAAME,QAAS,EAAhD;AACAb,MAAAA,QAAQ,CAACc,UAAD,CAAR;AACH;AACJ,GAjCD;;AAkCA,QAAMc,QAAQ,GAAG,CAACd,UAAD,EAAae,IAAb,KAAsB;AACnC,QAAGA,IAAH,EAAQ;AACJ,UAAGf,UAAU,CAACe,IAAD,CAAV,CAAiBpC,IAAjB,KAA0BH,MAA7B,EAAoC;AAChCP,QAAAA,CAAC,CAAC+C,OAAF,CAAUhB,UAAU,CAACP,YAAD,CAAV,CAAyBX,QAAnC,EAA8CmC,KAAD,IAAW;AACpDH,UAAAA,QAAQ,CAACd,UAAD,EAAaA,UAAU,CAACiB,KAAD,CAAV,CAAkBvC,IAA/B,CAAR;AACH,SAFD,EADgC,CAIhC;AACA;AACA;;AACH;;AACD,UAAG,CAACsB,UAAU,CAACe,IAAD,CAAV,CAAiBnC,MAArB,EAA4B;AACxB,YAAIwB,WAAW,GAAGjC,aAAa,CAAC4C,IAAD,CAA/B;;AACA,YAAGX,WAAW,IAAI,IAAf,IAAuBnB,KAAK,CAACmB,WAAD,CAAL,CAAmBzB,IAAnB,KAA4BJ,IAAtD,EAA2D;AACvD;AACH;;AACDyB,QAAAA,UAAU,CAACI,WAAD,CAAV,CAAwBtB,QAAxB,GAAmCkB,UAAU,CAACI,WAAD,CAAV,CAAwBtB,QAAxB,CAAiCwB,MAAjC,CAAyCC,IAAD,IAAUA,IAAI,KAAKQ,IAA3D,CAAnC;AACH;;AAED,aAAOf,UAAU,CAACe,IAAD,CAAjB;AACH;AACJ,GApBD;;AAqBA,QAAMG,KAAK,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAChC,QAAGD,OAAH,EAAW;AACP,UAAIA,OAAO,IAAIlC,KAAf,EAAqB;AACjBoB,QAAAA,KAAK,CAAE,mFAAF,CAAL;AACA;AACH;;AACD,UAAIL,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAelB,KAAf,CAAX,CAAjB;AACA,UAAImB,WAAW,GAAGjC,aAAa,CAACgD,OAAD,CAA/B;;AACA,UAAGf,WAAW,IAAI,IAAf,IAAuBnB,KAAK,CAACmB,WAAD,CAAL,CAAmBzB,IAAnB,KAA4B,MAAtD,EAA6D;AACzD;AACH;;AACDqB,MAAAA,UAAU,CAACI,WAAD,CAAV,CAAwBtB,QAAxB,CAAiC0B,IAAjC,CAAsCW,OAAtC;AAEAnB,MAAAA,UAAU,CAACmB,OAAD,CAAV,GAAsBC,OAAO,GAAG;AAC5B1C,QAAAA,IAAI,EAAEyC,OADsB;AAE5BxC,QAAAA,IAAI,EAAE,MAFsB;AAG5BE,QAAAA,MAAM,EAAE;AAHoB,OAAH,GAIzB;AACAH,QAAAA,IAAI,EAAEyC,OADN;AAEAxC,QAAAA,IAAI,EAAE,QAFN;AAGAE,QAAAA,MAAM,EAAE,KAHR;AAIAC,QAAAA,QAAQ,EAAE;AAJV,OAJJ;AAUA8B,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASO,OAAO,GAAG,MAAH,GAAY,QAAS,IAAGD,OAAQ,EAA7D;AACAjC,MAAAA,QAAQ,CAACc,UAAD,CAAR;AACH;AACJ,GA1BD;;AA4BA,QAAMqB,KAAK,GAAGhD,mBAAmB,EAAjC;AACA,QAAMiD,OAAO,GAAG;AACZC,IAAAA,GAAG,EAAEnC,YADO;AAEZoC,IAAAA,KAAK,EAAElC,cAFK;AAGZmC,IAAAA,KAAK,EAAEjC,WAHK;AAIZkC,IAAAA,GAAG,EAAEhC;AAJO,GAAhB;AAOA3B,EAAAA,SAAS,CAAC,MAAM;AACZmD,IAAAA,KAAK,CAAC/B,SAAD,EAAY,IAAZ,CAAL;AACH,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAGApB,EAAAA,SAAS,CAAC,MAAM;AACZmD,IAAAA,KAAK,CAAC7B,WAAD,EAAc,KAAd,CAAL;AACH,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAGAtB,EAAAA,SAAS,CAAC,MAAM;AACZ4B,IAAAA,QAAQ,CAACJ,WAAD,CAAR;AACH,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAGAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAelB,KAAf,CAAX,CAAjB;AACA6B,IAAAA,QAAQ,CAACd,UAAD,EAAaP,YAAb,CAAR,CAFY,CAGZ;;AACAP,IAAAA,QAAQ,CAACc,UAAD,CAAR;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBpB,YAAa,EAA1C;AACH,GANQ,EAMN,CAACA,YAAD,CANM,CAAT;;AAQA,QAAMiB,YAAY,GAAG,MAAM;AACvB,WAAOzC,CAAC,CAACqC,MAAF,CAASrC,CAAC,CAAC0D,MAAF,CAAS1C,KAAT,CAAT,EAA2B2C,IAAD,IAAU;AAAE,aAAOA,IAAI,CAAChD,MAAL,KAAgB,IAAvB;AAA6B,KAAnE,CAAP,CADuB,CAEvB;AACH,GAHD;;AAIA,QAAMiD,QAAQ,GAAID,IAAD,IAAU;AACvB,QAAI5B,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAelB,KAAf,CAAX,CAAjB;AACAe,IAAAA,UAAU,CAAC4B,IAAI,CAAClD,IAAN,CAAV,CAAsBG,MAAtB,GAA+B,CAAC+C,IAAI,CAAC/C,MAArC;AACAK,IAAAA,QAAQ,CAACc,UAAD,CAAR;AACH,GAJD;;AAKA,QAAM8B,aAAa,GAAIF,IAAD,IAAU;AAC5B;AACA,WAAO3D,CAAC,CAAC8D,GAAF,CAAMH,IAAI,CAAC9C,QAAX,EAAsBJ,IAAD,IAAU;AAClC,aAAOO,KAAK,CAACP,IAAD,CAAZ;AACH,KAFM,CAAP;AAGH,GALD;;AAMA,QAAMsD,IAAI,GAAGtB,YAAY,EAAzB;AAEA,sBACI;AAAA,cAEQzC,CAAC,CAAC8D,GAAF,CAAMC,IAAN,EAAaJ,IAAD,IAAU;AAClB,0BAAQ,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAkB,QAAA,WAAW,EAAEE,aAA/B;AAA8C,QAAA,KAAK,EAAE,CAArD;AAAwD,QAAA,QAAQ,EAAED,QAAlE;AACE,QAAA,SAAS,EAAER,KADb;AACoB,QAAA,OAAO,EAAEC;AAD7B;AAAA;AAAA;AAAA;AAAA,cAAR;AAEH,KAHD;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ,CArI4B,CAgJ5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;GAxJevC,Q;;KAAAA,Q;AA0JhB,eAAeA,QAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport _ from 'lodash';\r\nimport {renameChild, getFatherPath, getOldNodePath, getItemsContextMenu} from '../utills/utills'\r\nimport Node from \"./Node.js\";\r\nimport {FILE, FOLDER} from \"../utills/constants\";\r\n\r\nconst data = {\r\n    '/root': {\r\n        path: '/root',\r\n        type: 'folder',\r\n        isRoot: true,\r\n        isOpen: false,\r\n        children: ['/root/gal', '/root/ben']\r\n    },\r\n    '/root2': {\r\n        path: '/root2',\r\n        type: 'folder',\r\n        isRoot: true,\r\n        isOpen: false,\r\n        children: ['/root2/gal2']\r\n    },\r\n    '/root2/gal2': {\r\n        path: '/root/gal2',\r\n        type: 'folder',\r\n        isRoot: false,\r\n        isOpen: false,\r\n        children: []\r\n    },\r\n    '/root/gal': {\r\n        path: '/root/gal',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: ['/root/gal/read.txt']\r\n    },\r\n    '/root/ben': {\r\n        path: '/root/ben',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: []\r\n    },\r\n    '/root/gal/read.txt': {\r\n        path: '/root/gal/read.txt',\r\n        type: 'file',\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\nexport function CateTree(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    const [nodes, setNodes] = useState(data);\r\n    const [fileToAdd, setFileToAdd] = useState(null);\r\n    const [folderToAdd, setFolderToAdd] = useState(null);\r\n    const [newNameFile, setNameFile] = useState(null);\r\n    const [fileToDelete, setFileToDelete] = useState(null);\r\n\r\n    const onRename = (newName) => {\r\n        if(newName){\r\n            let [old_node, name] = getOldNodePath(newName);\r\n            if(old_node == null || name == null)\r\n                return;\r\n            // in case renaming the root\r\n            let new_node = `/${name}`;\r\n            let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n            if(!nodes_copy[old_node].isRoot){\r\n                let father_path = getFatherPath(newName);\r\n                if(father_path == null){\r\n                    return;\r\n                }\r\n                new_node = `${father_path}/${name}`;\r\n                if (new_node in nodes){\r\n                    alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n                    return;\r\n                }\r\n                nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== old_node)\r\n                nodes_copy[father_path].children.push(new_node);\r\n            }\r\n            else{\r\n                // case renaming root name, and already have another root with the specific name\r\n                let root_nodes = getRootNodes();\r\n                if (root_nodes.includes(new_node)){\r\n                    alert(`There is already a different root with this name,\\n Please insert different name!`);\r\n                    return;\r\n                }\r\n            }\r\n            renameChild(nodes_copy, old_node, new_node);\r\n            console.log(`Renaming ${old_node} to ${new_node}`);\r\n            setNodes(nodes_copy);\r\n        }\r\n    };\r\n    const onDelete = (nodes_copy, file) => {\r\n        if(file){\r\n            if(nodes_copy[file].type === FOLDER){\r\n                _.forEach(nodes_copy[fileToDelete].children, (child) => {\r\n                    onDelete(nodes_copy, nodes_copy[child].path);\r\n                });\r\n                // nodes_copy[fileToDelete].children.forEach( (child) =>{\r\n                //     onDelete(nodes_copy, nodes_copy[child].path);\r\n                // })\r\n            }\r\n            if(!nodes_copy[file].isRoot){\r\n                let father_path = getFatherPath(file);\r\n                if(father_path == null || nodes[father_path].type === FILE){\r\n                    return;\r\n                }\r\n                nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== file);\r\n            }\r\n\r\n            delete nodes_copy[file];\r\n        }\r\n    }\r\n    const onAdd = (newFile, is_file) => {\r\n        if(newFile){\r\n            if (newFile in nodes){\r\n                alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n                return;\r\n            }\r\n            let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n            let father_path = getFatherPath(newFile);\r\n            if(father_path == null || nodes[father_path].type === 'file'){\r\n                return;\r\n            }\r\n            nodes_copy[father_path].children.push(newFile);\r\n\r\n            nodes_copy[newFile] = is_file ? {\r\n                path: newFile,\r\n                type: 'file',\r\n                isOpen: false\r\n            } : {\r\n                path: newFile,\r\n                type: 'folder',\r\n                isOpen: false,\r\n                children: []\r\n            }\r\n            console.log(`Adding ${is_file ? 'file' : 'folder'} ${newFile}`);\r\n            setNodes(nodes_copy);\r\n        }\r\n    };\r\n\r\n    const items = getItemsContextMenu();\r\n    const setters = {\r\n        ADD: setFileToAdd,\r\n        ADDFO: setFolderToAdd,\r\n        RNAME: setNameFile,\r\n        DEL: setFileToDelete,\r\n    }\r\n\r\n    useEffect(() => {\r\n        onAdd(fileToAdd, true);\r\n    }, [fileToAdd])\r\n    useEffect(() => {\r\n        onAdd(folderToAdd, false);\r\n    }, [folderToAdd])\r\n    useEffect(() => {\r\n        onRename(newNameFile);\r\n    }, [newNameFile])\r\n    useEffect(() => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        onDelete(nodes_copy, fileToDelete);\r\n        // gal should check it\r\n        setNodes(nodes_copy);\r\n        console.log(`Deleting file ${fileToDelete}`);\r\n    }, [fileToDelete])\r\n\r\n    const getRootNodes = () => {\r\n        return _.filter(_.values(nodes), (node) => { return node.isRoot === true;});\r\n        //return values(nodes).filter(node => node.isRoot === true);\r\n    }\r\n    const onToggle = (node) => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        nodes_copy[node.path].isOpen = !node.isOpen;\r\n        setNodes(nodes_copy);\r\n    }\r\n    const getChildNodes = (node) => {\r\n        //return node.children ? node.children.map(path => nodes[path]) : [];\r\n        return _.map(node.children, (path) => {\r\n            return nodes[path];\r\n        });\r\n    }\r\n    const root = getRootNodes();\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                _.map(root, (node) => {\r\n                    return (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n                              menuItems={items} setters={setters}/>)\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n\r\n    // return(\r\n    //     <div>\r\n    //         {\r\n    //             root.map((node) => (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n    //                                     menuItems={items} setters={setters}/>))\r\n    //         }\r\n    //     </div>\r\n    // )\r\n}\r\n\r\nexport default CateTree;"]},"metadata":{},"sourceType":"module"}