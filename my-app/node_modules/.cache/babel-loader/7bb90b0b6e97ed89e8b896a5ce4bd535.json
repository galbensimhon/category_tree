{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { getItemsContextMenu } from '../utills/utills';\nimport Node from \"./Node.js\";\nimport { Container } from \"@material-ui/core\";\nimport { useHistory } from 'react-router-dom';\nimport queryString from \"query-string\";\nimport { loadData, loadTree } from '../Api';\nexport function Tree(props) {\n  _s();\n\n  const {\n    nodes,\n    setNodes,\n    onRename,\n    onDelete,\n    onAdd,\n    onLoading,\n    rootName\n  } = props;\n  const history = useHistory(); //const [exposedNodes, setExposedNodes] = useState({});\n  //const [rootNodes, setRootNodes] = useState([]);\n  // TODO: in future will be request api and not data (get exposed data data - getTree(id))\n\n  const getRootNodes = exposed => {\n    return _.filter(exposed, node => {\n      return node.isRoot === true;\n    });\n  }; // useEffect(() => {\n  //     console.log('asdasdasaaaaaaa')\n  //     // const fetchTree = async (id) => {\n  //     //     console.log('789')\n  //     //\n  //     //     return loadTree(id);\n  //     // }\n  //     const getExposedTree = async () => {\n  //         onLoading(true);\n  //         let parsed = queryString.parse(window.location.search);\n  //         if(!parsed || !parsed.id){\n  //             alert('problem with getting category tree..');\n  //             history.push(`${process.env.PUBLIC_URL}/`);\n  //             return;\n  //         }\n  //         let tree_data = await loadTree(parsed.id);\n  //         console.log('456')\n  //\n  //         if(!tree_data){\n  //             alert('problem with getting category tree.\\n the id which given is not found..');\n  //             history.push(`${process.env.PUBLIC_URL}/`);\n  //             return;\n  //         }\n  //         onLoading(false);\n  //         return tree_data;\n  //     }\n  //\n  //     let exposed = getExposedTree();\n  //     console.log('123')\n  //\n  //     setExposedNodes(exposed);\n  //     setRootNodes(getRootNodes(exposed));\n  // }, [])\n  // useEffect(() => {\n  //     console.log('asdasdasaaaaaaa')\n  //     // const fetchTree = async (id) => {\n  //     //     console.log('789')\n  //     //\n  //     //     return loadTree(id);\n  //     // }\n  //     const onRender = async () => {\n  //         //onLoading(true);\n  //         let parsed = queryString.parse(window.location.search);\n  //         if(!parsed || !parsed.id){\n  //             alert('problem with getting category tree..');\n  //             history.push(`${process.env.PUBLIC_URL}/`);\n  //             return;\n  //         }\n  //         console.log('789')\n  //\n  //         let tree_data = await loadTree(parsed.id);\n  //         console.log('456')\n  //\n  //         if(!tree_data){\n  //             alert('problem with getting category tree.\\n the id which given is not found..');\n  //             history.push(`${process.env.PUBLIC_URL}/`);\n  //             return;\n  //         }\n  //         console.log('123')\n  //\n  //         setExposedNodes(tree_data);\n  //         setRootNodes(getRootNodes(tree_data));\n  //         //onLoading(false);\n  //         //return tree_data;\n  //     }\n  //\n  //     onRender();\n  // }, [])\n\n\n  const getexposedNodes = () => {\n    return _.filter(_.values(nodes), node => {\n      return node.path.startsWith(`/${rootName}/`) || node.path === `/${rootName}`;\n    });\n  };\n\n  let exposedNodes = getexposedNodes();\n  let rootNodes = getRootNodes(exposedNodes); // useEffect(() => {\n  //     const onRender = async () => {\n  //         let res = await loadData();\n  //         setNodes(res);\n  //         setAllRoots(getRootNodesWithParam(res));\n  //     }\n  //     onRender();\n  // }, [])\n\n  const items = getItemsContextMenu();\n  const setters = {\n    ADD: onAdd,\n    RNAME: onRename,\n    DEL: onDelete\n  };\n\n  const onToggle = node => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    nodes_copy[node.path].isOpen = !nodes_copy[node.path].isOpen;\n    setNodes(nodes_copy);\n  };\n\n  const getChildNodes = node => {\n    return _.map(node.children, path => {\n      return nodes[path];\n    });\n  }; //const root = getRootNodes();\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: 'md',\n    children: _.map(rootNodes, node => {\n      return /*#__PURE__*/_jsxDEV(Node, {\n        node: node,\n        getChildren: getChildNodes,\n        level: 1,\n        onToggle: onToggle,\n        menuItems: items,\n        setters: setters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/Tree.js"],"names":["React","useEffect","useState","_","getItemsContextMenu","Node","Container","useHistory","queryString","loadData","loadTree","Tree","props","nodes","setNodes","onRename","onDelete","onAdd","onLoading","rootName","history","getRootNodes","exposed","filter","node","isRoot","getexposedNodes","values","path","startsWith","exposedNodes","rootNodes","items","setters","ADD","RNAME","DEL","onToggle","nodes_copy","JSON","parse","stringify","isOpen","getChildNodes","map","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAAQC,mBAAR,QAAkC,kBAAlC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAAQC,QAAR,EAAkBC,QAAlB,QAAiC,QAAjC;AAEA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACxB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA,KAAvC;AAA8CC,IAAAA,SAA9C;AAAyDC,IAAAA;AAAzD,MAAsEP,KAA5E;AACA,QAAMQ,OAAO,GAAGb,UAAU,EAA1B,CAFwB,CAGxB;AACA;AAEA;;AAGA,QAAMc,YAAY,GAAIC,OAAD,IAAa;AAC9B,WAAOnB,CAAC,CAACoB,MAAF,CAASD,OAAT,EAAmBE,IAAD,IAAU;AAAE,aAAOA,IAAI,CAACC,MAAL,KAAgB,IAAvB;AAA6B,KAA3D,CAAP;AACH,GAFD,CATwB,CAaxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC1B,WAAOvB,CAAC,CAACoB,MAAF,CAASpB,CAAC,CAACwB,MAAF,CAASd,KAAT,CAAT,EAA2BW,IAAD,IAAU;AAAE,aAAOA,IAAI,CAACI,IAAL,CAAUC,UAAV,CAAsB,IAAGV,QAAS,GAAlC,KAAyCK,IAAI,CAACI,IAAL,KAAe,IAAGT,QAAS,EAA3E;AAA8E,KAApH,CAAP;AACH,GAFD;;AAIA,MAAIW,YAAY,GAAGJ,eAAe,EAAlC;AACA,MAAIK,SAAS,GAAGV,YAAY,CAACS,YAAD,CAA5B,CAxFwB,CA0FxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAME,KAAK,GAAG5B,mBAAmB,EAAjC;AACA,QAAM6B,OAAO,GAAG;AACZC,IAAAA,GAAG,EAAEjB,KADO;AAEZkB,IAAAA,KAAK,EAAEpB,QAFK;AAGZqB,IAAAA,GAAG,EAAEpB;AAHO,GAAhB;;AAMA,QAAMqB,QAAQ,GAAIb,IAAD,IAAU;AACvB,QAAIc,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe5B,KAAf,CAAX,CAAjB;AACAyB,IAAAA,UAAU,CAACd,IAAI,CAACI,IAAN,CAAV,CAAsBc,MAAtB,GAA+B,CAACJ,UAAU,CAACd,IAAI,CAACI,IAAN,CAAV,CAAsBc,MAAtD;AACA5B,IAAAA,QAAQ,CAACwB,UAAD,CAAR;AACH,GAJD;;AAKA,QAAMK,aAAa,GAAInB,IAAD,IAAU;AAC5B,WAAOrB,CAAC,CAACyC,GAAF,CAAMpB,IAAI,CAACqB,QAAX,EAAsBjB,IAAD,IAAU;AAClC,aAAOf,KAAK,CAACe,IAAD,CAAZ;AACH,KAFM,CAAP;AAGH,GAJD,CA/GwB,CAqHxB;;;AAEA,sBACI,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAE,IAArB;AAAA,cAEQzB,CAAC,CAACyC,GAAF,CAAMb,SAAN,EAAkBP,IAAD,IAAU;AACvB,0BAAQ,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAkB,QAAA,WAAW,EAAEmB,aAA/B;AAA8C,QAAA,KAAK,EAAE,CAArD;AAAwD,QAAA,QAAQ,EAAEN,QAAlE;AACM,QAAA,SAAS,EAAEL,KADjB;AACwB,QAAA,OAAO,EAAEC;AADjC;AAAA;AAAA;AAAA;AAAA,cAAR;AAEH,KAHD;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAjIetB,I;UAEIJ,U;;;KAFJI,I;AAmIhB,eAAeA,IAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport _ from 'lodash';\r\nimport {getItemsContextMenu} from '../utills/utills'\r\nimport Node from \"./Node.js\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport queryString from \"query-string\";\r\nimport {loadData, loadTree} from '../Api'\r\n\r\nexport function Tree(props) {\r\n    const { nodes, setNodes, onRename, onDelete, onAdd, onLoading, rootName } = props;\r\n    const history = useHistory();\r\n    //const [exposedNodes, setExposedNodes] = useState({});\r\n    //const [rootNodes, setRootNodes] = useState([]);\r\n\r\n    // TODO: in future will be request api and not data (get exposed data data - getTree(id))\r\n\r\n\r\n    const getRootNodes = (exposed) => {\r\n        return _.filter(exposed, (node) => { return node.isRoot === true;});\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     console.log('asdasdasaaaaaaa')\r\n    //     // const fetchTree = async (id) => {\r\n    //     //     console.log('789')\r\n    //     //\r\n    //     //     return loadTree(id);\r\n    //     // }\r\n    //     const getExposedTree = async () => {\r\n    //         onLoading(true);\r\n    //         let parsed = queryString.parse(window.location.search);\r\n    //         if(!parsed || !parsed.id){\r\n    //             alert('problem with getting category tree..');\r\n    //             history.push(`${process.env.PUBLIC_URL}/`);\r\n    //             return;\r\n    //         }\r\n    //         let tree_data = await loadTree(parsed.id);\r\n    //         console.log('456')\r\n    //\r\n    //         if(!tree_data){\r\n    //             alert('problem with getting category tree.\\n the id which given is not found..');\r\n    //             history.push(`${process.env.PUBLIC_URL}/`);\r\n    //             return;\r\n    //         }\r\n    //         onLoading(false);\r\n    //         return tree_data;\r\n    //     }\r\n    //\r\n    //     let exposed = getExposedTree();\r\n    //     console.log('123')\r\n    //\r\n    //     setExposedNodes(exposed);\r\n    //     setRootNodes(getRootNodes(exposed));\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     console.log('asdasdasaaaaaaa')\r\n    //     // const fetchTree = async (id) => {\r\n    //     //     console.log('789')\r\n    //     //\r\n    //     //     return loadTree(id);\r\n    //     // }\r\n    //     const onRender = async () => {\r\n    //         //onLoading(true);\r\n    //         let parsed = queryString.parse(window.location.search);\r\n    //         if(!parsed || !parsed.id){\r\n    //             alert('problem with getting category tree..');\r\n    //             history.push(`${process.env.PUBLIC_URL}/`);\r\n    //             return;\r\n    //         }\r\n    //         console.log('789')\r\n    //\r\n    //         let tree_data = await loadTree(parsed.id);\r\n    //         console.log('456')\r\n    //\r\n    //         if(!tree_data){\r\n    //             alert('problem with getting category tree.\\n the id which given is not found..');\r\n    //             history.push(`${process.env.PUBLIC_URL}/`);\r\n    //             return;\r\n    //         }\r\n    //         console.log('123')\r\n    //\r\n    //         setExposedNodes(tree_data);\r\n    //         setRootNodes(getRootNodes(tree_data));\r\n    //         //onLoading(false);\r\n    //         //return tree_data;\r\n    //     }\r\n    //\r\n    //     onRender();\r\n    // }, [])\r\n\r\n    const getexposedNodes = () => {\r\n        return _.filter(_.values(nodes), (node) => { return node.path.startsWith(`/${rootName}/`) || node.path === `/${rootName}`;})\r\n    }\r\n\r\n    let exposedNodes = getexposedNodes();\r\n    let rootNodes = getRootNodes(exposedNodes);\r\n\r\n    // useEffect(() => {\r\n    //     const onRender = async () => {\r\n    //         let res = await loadData();\r\n    //         setNodes(res);\r\n    //         setAllRoots(getRootNodesWithParam(res));\r\n    //     }\r\n    //     onRender();\r\n    // }, [])\r\n\r\n    const items = getItemsContextMenu();\r\n    const setters = {\r\n        ADD: onAdd,\r\n        RNAME: onRename,\r\n        DEL: onDelete,\r\n    }\r\n\r\n    const onToggle = (node) => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        nodes_copy[node.path].isOpen = !nodes_copy[node.path].isOpen;\r\n        setNodes(nodes_copy);\r\n    }\r\n    const getChildNodes = (node) => {\r\n        return _.map(node.children, (path) => {\r\n            return nodes[path];\r\n        });\r\n    }\r\n\r\n    //const root = getRootNodes();\r\n\r\n    return(\r\n        <Container maxWidth={'md'} >\r\n            {\r\n                _.map(rootNodes, (node) => {\r\n                    return (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n                                  menuItems={items} setters={setters} />)\r\n                })\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Tree;"]},"metadata":{},"sourceType":"module"}