{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport _ from 'lodash';\nimport { getItemsContextMenu } from '../utills/utills';\nimport Node from \"./Node.js\";\nimport { Container } from \"@material-ui/core\";\nimport { useHistory } from 'react-router-dom';\nimport queryString from \"query-string\";\nimport { loadTree } from '../Api';\nexport function Tree(props) {\n  _s();\n\n  const {\n    nodes,\n    setNodes,\n    onRename,\n    onDelete,\n    onAdd,\n    onLoading,\n    rootName\n  } = props;\n  const history = useHistory(); // TODO: in future will be request api and not data (get exposed data data - getTree(id))\n\n  const fetchTree = async id => {\n    return loadTree(id);\n  };\n\n  const getExposedTree = async () => {\n    onLoading(true);\n    let parsed = queryString.parse(window.location.search);\n\n    if (!parsed || !parsed.tree_id) {\n      alert('problem with getting category tree..');\n      history.push(`${process.env.PUBLIC_URL}/`);\n      return;\n    }\n\n    let tree_data = await fetchTree(parsed.tree_id);\n\n    if (!tree_data) {\n      alert('problem with getting category tree.\\n the id which given is not found..');\n      history.push(`${process.env.PUBLIC_URL}/`);\n      return;\n    }\n\n    onLoading(false);\n    return tree_data;\n  }; // TODO: should delete it\n\n\n  const getExposedTree2 = () => {\n    onLoading(true);\n\n    let tree_data = _.filter(_.values(nodes), node => {\n      return node.path.startsWith(`/${rootName}/`) || node.path === `/${rootName}`;\n    }); //let tree_data = await fetchTree(parsed.tree_id);\n\n\n    if (!tree_data) {\n      alert('problem with getting category tree.\\n the id which given is not found..');\n      history.push(`${process.env.PUBLIC_URL}/`);\n      return;\n    }\n\n    onLoading(false);\n    return tree_data;\n  };\n\n  let exposedNodes = getExposedTree2();\n  const items = getItemsContextMenu();\n  const setters = {\n    ADD: onAdd,\n    RNAME: onRename,\n    DEL: onDelete\n  };\n\n  const getRootNodes = () => {\n    return _.filter(_.values(exposedNodes), node => {\n      return node.isRoot === true;\n    });\n  };\n\n  const onToggle = node => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    nodes_copy[node.path].isOpen = !nodes_copy[node.path].isOpen;\n    setNodes(nodes_copy);\n  };\n\n  const getChildNodes = node => {\n    return _.map(node.children, path => {\n      return nodes[path];\n    });\n  };\n\n  const root = getRootNodes();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: 'md',\n    children: _.map(root, node => {\n      return /*#__PURE__*/_jsxDEV(Node, {\n        node: node,\n        getChildren: getChildNodes,\n        level: 1,\n        onToggle: onToggle,\n        menuItems: items,\n        setters: setters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/Tree.js"],"names":["React","_","getItemsContextMenu","Node","Container","useHistory","queryString","loadTree","Tree","props","nodes","setNodes","onRename","onDelete","onAdd","onLoading","rootName","history","fetchTree","id","getExposedTree","parsed","parse","window","location","search","tree_id","alert","push","process","env","PUBLIC_URL","tree_data","getExposedTree2","filter","values","node","path","startsWith","exposedNodes","items","setters","ADD","RNAME","DEL","getRootNodes","isRoot","onToggle","nodes_copy","JSON","stringify","isOpen","getChildNodes","map","children","root"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport _ from 'lodash';\r\nimport {getItemsContextMenu} from '../utills/utills'\r\nimport Node from \"./Node.js\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport queryString from \"query-string\";\r\nimport { loadTree } from '../Api'\r\n\r\nexport function Tree(props) {\r\n    const { nodes, setNodes, onRename, onDelete, onAdd, onLoading, rootName } = props;\r\n    const history = useHistory();\r\n\r\n    // TODO: in future will be request api and not data (get exposed data data - getTree(id))\r\n    const fetchTree = async (id) => {\r\n        return loadTree(id);\r\n    }\r\n    const getExposedTree = async () => {\r\n        onLoading(true);\r\n        let parsed = queryString.parse(window.location.search);\r\n        if(!parsed || !parsed.tree_id){\r\n            alert('problem with getting category tree..');\r\n            history.push(`${process.env.PUBLIC_URL}/`);\r\n            return;\r\n        }\r\n        let tree_data = await fetchTree(parsed.tree_id);\r\n        if(!tree_data){\r\n            alert('problem with getting category tree.\\n the id which given is not found..');\r\n            history.push(`${process.env.PUBLIC_URL}/`);\r\n            return;\r\n        }\r\n        onLoading(false);\r\n        return tree_data;\r\n    }\r\n    // TODO: should delete it\r\n    const getExposedTree2 = () => {\r\n        onLoading(true);\r\n        let tree_data = _.filter(_.values(nodes), (node) => { return node.path.startsWith(`/${rootName}/`) || node.path === `/${rootName}`;});\r\n        //let tree_data = await fetchTree(parsed.tree_id);\r\n        if(!tree_data){\r\n            alert('problem with getting category tree.\\n the id which given is not found..');\r\n            history.push(`${process.env.PUBLIC_URL}/`);\r\n            return;\r\n        }\r\n        onLoading(false);\r\n        return tree_data;\r\n    }\r\n\r\n    let exposedNodes = getExposedTree2();\r\n\r\n    const items = getItemsContextMenu();\r\n    const setters = {\r\n        ADD: onAdd,\r\n        RNAME: onRename,\r\n        DEL: onDelete,\r\n    }\r\n\r\n    const getRootNodes = () => {\r\n        return _.filter(_.values(exposedNodes), (node) => { return node.isRoot === true;});\r\n    }\r\n    const onToggle = (node) => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        nodes_copy[node.path].isOpen = !nodes_copy[node.path].isOpen;\r\n        setNodes(nodes_copy);\r\n    }\r\n    const getChildNodes = (node) => {\r\n        return _.map(node.children, (path) => {\r\n            return nodes[path];\r\n        });\r\n    }\r\n    const root = getRootNodes();\r\n\r\n    return(\r\n        <Container maxWidth={'md'} >\r\n            {\r\n                _.map(root, (node) => {\r\n                    return (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n                                  menuItems={items} setters={setters} />)\r\n                })\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Tree;"]},"metadata":{},"sourceType":"module"}