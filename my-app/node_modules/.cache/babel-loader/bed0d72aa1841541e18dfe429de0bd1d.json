{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Gal\\\\WebstormProjects\\\\CategoryTree\\\\my-react-app\\\\src\\\\components\\\\CateTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport values from 'lodash/values';\nimport last from 'lodash/last';\nimport head from 'lodash/head';\nimport Node from \"./Node.js\";\nimport { ADD_FILE, ADD_FOLDER, RENAME, DELETE, ADD, ADDFO, RNAME, DEL, FILE } from \"../utills/constants\";\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    isOpen: false,\n    children: ['/root/gal', '/root/ben']\n  },\n  '/root/gal': {\n    path: '/root/gal',\n    type: 'folder',\n    isOpen: false,\n    children: ['/root/gal/read.txt']\n  },\n  '/root/ben': {\n    path: '/root/ben',\n    type: 'folder',\n    isOpen: false,\n    children: []\n  },\n  '/root/gal/read.txt': {\n    path: '/root/gal/read.txt',\n    type: 'file',\n    isOpen: false\n  }\n}; // TODO: should implement this functions\n// change node, and also his father (children), can get by short the path by 1\n\nfunction getItemsContextMenu() {\n  const onClickAddFile = (node, name) => {\n    // add new node by name, also change father childrens\n    console.log('add file');\n  };\n\n  const onClickAddFolder = (node, name) => {\n    // add new node by name, also change father childrens\n    console.log('add directory');\n  };\n\n  const onClickDeleteFolder = node => {\n    // delete node by name, also change father childrens\n    console.log('delete directory');\n  };\n\n  const onClickDeleteFile = node => {\n    // delete node by name, also change father childrens\n    console.log('delete file');\n  };\n\n  const onClickRename = (node, name) => {\n    // change path of node, also change father childrens\n    console.log('rename file/Folder');\n  };\n\n  const onClickCancel = (node, name) => {\n    // change path of node, also change father childrens\n    console.log('rename file/Folder');\n  };\n\n  return [{\n    text: ADD_FILE,\n    type: 'folder',\n    needNameInput: true // itemClick: (node, name) => {\n    //     onClickAddFile(node, name);\n    // }\n\n  }, {\n    text: ADD_FOLDER,\n    type: 'folder',\n    needNameInput: true // itemClick: (node, name) => {\n    //     onClickAddFolder(node, name);\n    // }\n\n  }, {\n    text: DELETE,\n    type: 'both' // itemClick: (node) => {\n    //     node.type === 'folder' ? onClickDeleteFolder(node) : onClickDeleteFile(node);\n    // }\n\n  }, {\n    text: RENAME,\n    type: 'both',\n    needNameInput: true // itemClick: (node, name) => {\n    //     onClickRename(node, name);\n    // }\n\n  }];\n}\n\nexport function CateTree(props) {\n  _s();\n\n  //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\n  const [nodes, setNodes] = useState(data);\n  const [fileToAdd, setFileToAdd] = useState(null);\n  const [folderToAdd, setFolderToAdd] = useState(null);\n  const [newNameFile, setNameFile] = useState(null);\n  const [fileToDelete, setFileToDelete] = useState(null); // const onAddFile = (fileToAdd) => {\n  //     if(fileToAdd != null && fileToAdd !== ''){\n  //         let nodes_copy = JSON.parse(JSON.stringify(nodes));\n  //         const regex = RegExp('(.*)\\\\/\\\\w+$', 'gm');\n  //         let father_node = regex.exec(fileToAdd)[1];\n  //         if(father_node == null || nodes_copy[father_node].type === 'file'){\n  //             return;\n  //         }\n  //         if (fileToAdd in nodes_copy){\n  //             alert('There is already a file with this name in folder,\\n Please insert different name!');\n  //             return;\n  //         }\n  //         nodes_copy[father_node].children.push(fileToAdd);\n  //         nodes_copy[fileToAdd] = {\n  //             path: fileToAdd,\n  //             type: 'file',\n  //             isOpen: 'false'\n  //         }\n  //         console.log(`Adding file ${fileToAdd}`);\n  //         setNodes(nodes_copy);\n  //     }\n  // };\n\n  const getFatherPath = path => {\n    const regex = RegExp('(.*)\\\\/.+$', 'gm');\n    let father_node = regex.exec(path) || null;\n    return father_node != null ? father_node[1] : null;\n  };\n\n  const getOldNodePath = path => {\n    const regex = RegExp('(.*)_.+$', 'gm');\n    let father_node = regex.exec(path) || null;\n    return father_node != null ? father_node[1] : null;\n  };\n\n  const onRename = newName => {\n    if (newName != null && newName !== '') {\n      let father_path = getFatherPath(newName);\n\n      if (father_path == null || nodes[father_path].type === 'file') {\n        return;\n      }\n\n      let name = node => last(node.path.split('_'));\n\n      let new_node = `${father_path}/${name}`;\n\n      if (new_node in nodes) {\n        alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n        return;\n      }\n\n      let nodes_copy = JSON.parse(JSON.stringify(nodes));\n      let old_node = getOldNodePath(newName);\n      nodes_copy[father_path].children = nodes_copy[father_path].children.filter(item => item !== old_node);\n      nodes_copy[father_path].children.push(new_node);\n      nodes_copy[new_node] = { ...nodes_copy[old_node],\n        path: new_node\n      };\n      console.log(`Renaming ${old_node} to ${new_node}`);\n      setNodes(nodes_copy);\n    }\n  };\n\n  const onAdd = (newFile, is_file) => {\n    if (newFile != null && newFile !== '') {\n      let father_path = getFatherPath(newFile);\n\n      if (father_path == null || nodes[father_path].type === 'file') {\n        return;\n      }\n\n      if (newFile in nodes) {\n        alert(`There is already a file with this name in folder,\\n Please insert different name!`);\n        return;\n      }\n\n      let nodes_copy = JSON.parse(JSON.stringify(nodes));\n      nodes_copy[father_path].children.push(newFile);\n      nodes_copy[newFile] = is_file ? {\n        path: newFile,\n        type: 'file',\n        isOpen: false\n      } : {\n        path: newFile,\n        type: 'folder',\n        isOpen: false,\n        children: []\n      };\n      console.log(`Adding ${is_file ? 'file' : 'folder'} ${newFile}`);\n      setNodes(nodes_copy);\n    }\n  };\n\n  const items = getItemsContextMenu();\n  const setters = {\n    ADD: setFileToAdd,\n    ADDFO: setFolderToAdd,\n    RNAME: setNameFile,\n    DEL: setFileToDelete\n  };\n  useEffect(() => {\n    onAdd(fileToAdd, true);\n  }, [fileToAdd]);\n  useEffect(() => {\n    onAdd(folderToAdd, false);\n  }, [folderToAdd]);\n  useEffect(() => {\n    onRename(newNameFile);\n  }, [newNameFile]);\n  useEffect(() => {\n    if (fileToDelete) {\n      console.log(`Deleting file ${fileToDelete}`);\n      let old_nodes = JSON.parse(JSON.stringify(nodes));\n\n      if (old_nodes[fileToDelete].type === FILE) {\n        old_nodes[fileToDelete].children.forEach(child => {\n          onDelete(old_nodes[child]);\n        });\n      }\n\n      delete old_nodes[fileToDelete];\n      setNodes(old_nodes);\n    }\n  }, [fileToDelete]);\n\n  const getRootNodes = () => {\n    return values(nodes).filter(node => node.isRoot === true);\n  };\n\n  const onToggle = node => {\n    let nodes_copy = JSON.parse(JSON.stringify(nodes));\n    nodes_copy[node.path].isOpen = !node.isOpen;\n    setNodes(nodes_copy);\n  };\n\n  const getChildNodes = node => {\n    return node.children ? node.children.map(path => nodes[path]) : [];\n  };\n\n  const root = getRootNodes();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: root.map(node => /*#__PURE__*/_jsxDEV(Node, {\n      node: node,\n      getChildren: getChildNodes,\n      level: 1,\n      onToggle: onToggle,\n      menuItems: items,\n      setters: setters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 37\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CateTree, \"oeyfkiU6JMEBBAcVIWkECKAds7U=\");\n\n_c = CateTree;\nexport default CateTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"CateTree\");","map":{"version":3,"sources":["C:/Users/Gal/WebstormProjects/CategoryTree/my-react-app/src/components/CateTree.js"],"names":["React","Component","useEffect","useState","values","last","head","Node","ADD_FILE","ADD_FOLDER","RENAME","DELETE","ADD","ADDFO","RNAME","DEL","FILE","data","path","type","isRoot","isOpen","children","getItemsContextMenu","onClickAddFile","node","name","console","log","onClickAddFolder","onClickDeleteFolder","onClickDeleteFile","onClickRename","onClickCancel","text","needNameInput","CateTree","props","nodes","setNodes","fileToAdd","setFileToAdd","folderToAdd","setFolderToAdd","newNameFile","setNameFile","fileToDelete","setFileToDelete","getFatherPath","regex","RegExp","father_node","exec","getOldNodePath","onRename","newName","father_path","split","new_node","alert","nodes_copy","JSON","parse","stringify","old_node","filter","item","push","onAdd","newFile","is_file","items","setters","old_nodes","forEach","child","onDelete","getRootNodes","onToggle","getChildNodes","map","root"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\r\nimport values from 'lodash/values';\r\nimport last from 'lodash/last';\r\nimport head from 'lodash/head';\r\n\r\nimport Node from \"./Node.js\";\r\nimport {ADD_FILE, ADD_FOLDER, RENAME, DELETE, ADD, ADDFO, RNAME, DEL, FILE} from \"../utills/constants\";\r\n\r\nconst data = {\r\n    '/root': {\r\n        path: '/root',\r\n        type: 'folder',\r\n        isRoot: true,\r\n        isOpen: false,\r\n        children: ['/root/gal', '/root/ben']\r\n    },\r\n    '/root/gal': {\r\n        path: '/root/gal',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: ['/root/gal/read.txt']\r\n    },\r\n    '/root/ben': {\r\n        path: '/root/ben',\r\n        type: 'folder',\r\n        isOpen: false,\r\n        children: []\r\n    },\r\n    '/root/gal/read.txt': {\r\n        path: '/root/gal/read.txt',\r\n        type: 'file',\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\n\r\n\r\n// TODO: should implement this functions\r\n// change node, and also his father (children), can get by short the path by 1\r\nfunction getItemsContextMenu(){\r\n\r\n    const onClickAddFile = (node, name) => {\r\n        // add new node by name, also change father childrens\r\n        console.log('add file')\r\n    };\r\n    const onClickAddFolder = (node, name) => {\r\n        // add new node by name, also change father childrens\r\n        console.log('add directory')\r\n\r\n    };\r\n    const onClickDeleteFolder= (node) => {\r\n        // delete node by name, also change father childrens\r\n        console.log('delete directory')\r\n\r\n    };\r\n    const onClickDeleteFile = (node) => {\r\n        // delete node by name, also change father childrens\r\n        console.log('delete file')\r\n\r\n    };\r\n    const onClickRename = (node, name) => {\r\n        // change path of node, also change father childrens\r\n        console.log('rename file/Folder')\r\n\r\n    };\r\n    const onClickCancel = (node, name) => {\r\n        // change path of node, also change father childrens\r\n        console.log('rename file/Folder')\r\n\r\n    };\r\n\r\n    return [\r\n        {\r\n            text: ADD_FILE,\r\n            type: 'folder',\r\n            needNameInput: true,\r\n            // itemClick: (node, name) => {\r\n            //     onClickAddFile(node, name);\r\n            // }\r\n        },\r\n        {\r\n            text: ADD_FOLDER,\r\n            type: 'folder',\r\n            needNameInput: true,\r\n            // itemClick: (node, name) => {\r\n            //     onClickAddFolder(node, name);\r\n            // }\r\n        },\r\n        {\r\n            text: DELETE,\r\n            type: 'both',\r\n            // itemClick: (node) => {\r\n            //     node.type === 'folder' ? onClickDeleteFolder(node) : onClickDeleteFile(node);\r\n            // }\r\n        },\r\n        {\r\n            text: RENAME,\r\n            type: 'both',\r\n            needNameInput: true,\r\n            // itemClick: (node, name) => {\r\n            //     onClickRename(node, name);\r\n            // }\r\n        }\r\n    ];\r\n}\r\n\r\nexport function CateTree(props) {\r\n    //const [nodes, setNodes] = useState(localStorage.getItem('nodes') ? localStorage.getItem('nodes') : '');\r\n    const [nodes, setNodes] = useState(data);\r\n    const [fileToAdd, setFileToAdd] = useState(null);\r\n    const [folderToAdd, setFolderToAdd] = useState(null);\r\n    const [newNameFile, setNameFile] = useState(null);\r\n    const [fileToDelete, setFileToDelete] = useState(null);\r\n\r\n    // const onAddFile = (fileToAdd) => {\r\n    //     if(fileToAdd != null && fileToAdd !== ''){\r\n    //         let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n    //         const regex = RegExp('(.*)\\\\/\\\\w+$', 'gm');\r\n    //         let father_node = regex.exec(fileToAdd)[1];\r\n    //         if(father_node == null || nodes_copy[father_node].type === 'file'){\r\n    //             return;\r\n    //         }\r\n    //         if (fileToAdd in nodes_copy){\r\n    //             alert('There is already a file with this name in folder,\\n Please insert different name!');\r\n    //             return;\r\n    //         }\r\n    //         nodes_copy[father_node].children.push(fileToAdd);\r\n    //         nodes_copy[fileToAdd] = {\r\n    //             path: fileToAdd,\r\n    //             type: 'file',\r\n    //             isOpen: 'false'\r\n    //         }\r\n    //         console.log(`Adding file ${fileToAdd}`);\r\n    //         setNodes(nodes_copy);\r\n    //     }\r\n    // };\r\n    const getFatherPath = (path) => {\r\n        const regex = RegExp('(.*)\\\\/.+$', 'gm');\r\n        let father_node = regex.exec(path) || null;\r\n        return father_node != null ? father_node[1] : null;\r\n    }\r\n    const getOldNodePath = (path) => {\r\n        const regex = RegExp('(.*)_.+$', 'gm');\r\n        let father_node = regex.exec(path) || null;\r\n        return father_node != null ? father_node[1] : null;\r\n    }\r\n    const onRename = (newName) => {\r\n        if(newName != null && newName !== ''){\r\n            let father_path = getFatherPath(newName);\r\n            if(father_path == null || nodes[father_path].type === 'file'){\r\n                return;\r\n            }\r\n            let name = (node) => last(node.path.split('_'));\r\n            let new_node = `${father_path}/${name}`;\r\n            if (new_node in nodes){\r\n                alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n                return;\r\n            }\r\n\r\n            let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n            let old_node = getOldNodePath(newName);\r\n\r\n            nodes_copy[father_path].children = nodes_copy[father_path].children.filter((item) => item !== old_node)\r\n            nodes_copy[father_path].children.push(new_node);\r\n\r\n            nodes_copy[new_node] = {\r\n                ...nodes_copy[old_node],\r\n                path: new_node,\r\n            }\r\n            console.log(`Renaming ${old_node} to ${new_node}`);\r\n            setNodes(nodes_copy);\r\n        }\r\n    };\r\n\r\n    const onAdd = (newFile, is_file) => {\r\n        if(newFile != null && newFile !== ''){\r\n            let father_path = getFatherPath(newFile);\r\n            if(father_path == null || nodes[father_path].type === 'file'){\r\n                return;\r\n            }\r\n            if (newFile in nodes){\r\n                alert(`There is already a file with this name in folder,\\n Please insert different name!`);\r\n                return;\r\n            }\r\n\r\n            let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n            nodes_copy[father_path].children.push(newFile);\r\n            nodes_copy[newFile] = is_file ? {\r\n                path: newFile,\r\n                type: 'file',\r\n                isOpen: false\r\n            } : {\r\n                path: newFile,\r\n                type: 'folder',\r\n                isOpen: false,\r\n                children: []\r\n            }\r\n            console.log(`Adding ${is_file ? 'file' : 'folder'} ${newFile}`);\r\n            setNodes(nodes_copy);\r\n        }\r\n    };\r\n\r\n    const items = getItemsContextMenu();\r\n    const setters = {\r\n        ADD: setFileToAdd,\r\n        ADDFO: setFolderToAdd,\r\n        RNAME: setNameFile,\r\n        DEL: setFileToDelete,\r\n    }\r\n    useEffect(() => {\r\n        onAdd(fileToAdd, true);\r\n    }, [fileToAdd])\r\n    useEffect(() => {\r\n        onAdd(folderToAdd, false);\r\n    }, [folderToAdd])\r\n    useEffect(() => {\r\n        onRename(newNameFile);\r\n    }, [newNameFile])\r\n    useEffect(() => {\r\n        if(fileToDelete){\r\n            console.log(`Deleting file ${fileToDelete}`);\r\n            let old_nodes = JSON.parse(JSON.stringify(nodes));\r\n            if(old_nodes[fileToDelete].type === FILE){\r\n                old_nodes[fileToDelete].children.forEach( (child) =>{\r\n                    onDelete(old_nodes[child]);\r\n                })\r\n            }\r\n            delete old_nodes[fileToDelete];\r\n            setNodes(old_nodes);\r\n        }\r\n    }, [fileToDelete])\r\n\r\n    const getRootNodes = () => {\r\n        return values(nodes).filter(node => node.isRoot === true);\r\n    }\r\n\r\n    const onToggle = (node) => {\r\n        let nodes_copy = JSON.parse(JSON.stringify(nodes));\r\n        nodes_copy[node.path].isOpen = !node.isOpen;\r\n        setNodes(nodes_copy);\r\n    }\r\n\r\n    const getChildNodes = (node) => {\r\n        return node.children ? node.children.map(path => nodes[path]) : [];\r\n    }\r\n\r\n    const root = getRootNodes();\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                root.map((node) => (<Node node={node} getChildren={getChildNodes} level={1} onToggle={onToggle}\r\n                                        menuItems={items} setters={setters}/>))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CateTree;"]},"metadata":{},"sourceType":"module"}